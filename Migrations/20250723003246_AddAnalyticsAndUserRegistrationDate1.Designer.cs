// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieWebsite.Data;

#nullable disable

namespace MovieWebsite.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250723003246_AddAnalyticsAndUserRegistrationDate1")]
    partial class AddAnalyticsAndUserRegistrationDate1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e1a2a227-d8d7-48d8-996f-dadcfa86b5ff",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "891788f9-876d-4e84-afb6-1cc2f011f674",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MovieWebsite.Models.AnalyticsCounter", b =>
                {
                    b.Property<string>("CounterName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<long>("CountValue")
                        .HasColumnType("INTEGER");

                    b.HasKey("CounterName");

                    b.ToTable("AnalyticsCounters");
                });

            modelBuilder.Entity("MovieWebsite.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MovieWebsite.Models.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("MovieWebsite.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Dislikes")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EpisodeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Likes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("MovieId");

                    b.HasIndex("ParentCommentId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MovieWebsite.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("FlagPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "VN",
                            Name = "Việt Nam"
                        },
                        new
                        {
                            Id = 2,
                            Code = "KR",
                            Name = "Hàn Quốc"
                        },
                        new
                        {
                            Id = 3,
                            Code = "CN",
                            Name = "Trung Quốc"
                        },
                        new
                        {
                            Id = 4,
                            Code = "JP",
                            Name = "Nhật Bản"
                        },
                        new
                        {
                            Id = 5,
                            Code = "US",
                            Name = "Mỹ"
                        },
                        new
                        {
                            Id = 6,
                            Code = "TH",
                            Name = "Thái Lan"
                        },
                        new
                        {
                            Id = 7,
                            Code = "UK",
                            Name = "Anh"
                        },
                        new
                        {
                            Id = 8,
                            Code = "FR",
                            Name = "Pháp"
                        },
                        new
                        {
                            Id = 9,
                            Code = "CA",
                            Name = "Canada"
                        });
                });

            modelBuilder.Entity("MovieWebsite.Models.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("VideoPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Views")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MovieId", "EpisodeNumber")
                        .IsUnique();

                    b.ToTable("Episodes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 23, 7, 32, 45, 809, DateTimeKind.Local).AddTicks(8120),
                            Duration = 1200,
                            EpisodeNumber = 1,
                            IsPublished = true,
                            MovieId = 1,
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Tập 1",
                            UpdatedAt = new DateTime(2025, 7, 23, 7, 32, 45, 809, DateTimeKind.Local).AddTicks(8120),
                            VideoPath = "/Uploads/videos/1_ep1.mp4",
                            Views = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 23, 7, 32, 45, 809, DateTimeKind.Local).AddTicks(8130),
                            Duration = 1200,
                            EpisodeNumber = 2,
                            IsPublished = true,
                            MovieId = 1,
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Tập 2",
                            UpdatedAt = new DateTime(2025, 7, 23, 7, 32, 45, 809, DateTimeKind.Local).AddTicks(8130),
                            VideoPath = "/Uploads/videos/1_ep2.mp4",
                            Views = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 7, 23, 7, 32, 45, 809, DateTimeKind.Local).AddTicks(8160),
                            Duration = 1200,
                            EpisodeNumber = 1,
                            IsPublished = true,
                            MovieId = 2,
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Tập 1",
                            UpdatedAt = new DateTime(2025, 7, 23, 7, 32, 45, 809, DateTimeKind.Local).AddTicks(8160),
                            VideoPath = "/Uploads/videos/2_ep1.mp4",
                            Views = 0
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 7, 23, 7, 32, 45, 809, DateTimeKind.Local).AddTicks(8160),
                            Duration = 1200,
                            EpisodeNumber = 2,
                            IsPublished = true,
                            MovieId = 2,
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Tập 2",
                            UpdatedAt = new DateTime(2025, 7, 23, 7, 32, 45, 809, DateTimeKind.Local).AddTicks(8160),
                            VideoPath = "/Uploads/videos/2_ep2.mp4",
                            Views = 0
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 7, 23, 7, 32, 45, 809, DateTimeKind.Local).AddTicks(8190),
                            Duration = 1200,
                            EpisodeNumber = 1,
                            IsPublished = true,
                            MovieId = 3,
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Tập 1",
                            UpdatedAt = new DateTime(2025, 7, 23, 7, 32, 45, 809, DateTimeKind.Local).AddTicks(8190),
                            VideoPath = "/Uploads/videos/3_ep1.mp4",
                            Views = 0
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 7, 23, 7, 32, 45, 809, DateTimeKind.Local).AddTicks(8190),
                            Duration = 1200,
                            EpisodeNumber = 2,
                            IsPublished = true,
                            MovieId = 3,
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Tập 2",
                            UpdatedAt = new DateTime(2025, 7, 23, 7, 32, 45, 809, DateTimeKind.Local).AddTicks(8200),
                            VideoPath = "/Uploads/videos/3_ep2.mp4",
                            Views = 0
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 7, 23, 7, 32, 45, 809, DateTimeKind.Local).AddTicks(8220),
                            Duration = 1200,
                            EpisodeNumber = 1,
                            IsPublished = true,
                            MovieId = 4,
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Tập 1",
                            UpdatedAt = new DateTime(2025, 7, 23, 7, 32, 45, 809, DateTimeKind.Local).AddTicks(8220),
                            VideoPath = "/Uploads/videos/4_ep1.mp4",
                            Views = 0
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 7, 23, 7, 32, 45, 809, DateTimeKind.Local).AddTicks(8220),
                            Duration = 1200,
                            EpisodeNumber = 2,
                            IsPublished = true,
                            MovieId = 4,
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Tập 2",
                            UpdatedAt = new DateTime(2025, 7, 23, 7, 32, 45, 809, DateTimeKind.Local).AddTicks(8220),
                            VideoPath = "/Uploads/videos/4_ep2.mp4",
                            Views = 0
                        });
                });

            modelBuilder.Entity("MovieWebsite.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#FF5722",
                            Name = "Hành Động"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#E91E63",
                            Name = "Tình Cảm"
                        },
                        new
                        {
                            Id = 3,
                            Color = "#FFC107",
                            Name = "Hài Hước"
                        },
                        new
                        {
                            Id = 4,
                            Color = "#424242",
                            Name = "Kinh Dị"
                        },
                        new
                        {
                            Id = 5,
                            Color = "#2196F3",
                            Name = "Khoa Học Viễn Tưởng"
                        },
                        new
                        {
                            Id = 6,
                            Color = "#4CAF50",
                            Name = "Phiêu Lưu"
                        },
                        new
                        {
                            Id = 7,
                            Color = "#9C27B0",
                            Name = "Chính Kịch"
                        },
                        new
                        {
                            Id = 8,
                            Color = "#FF9800",
                            Name = "Hoạt Hình"
                        },
                        new
                        {
                            Id = 9,
                            Color = "#00BCD4",
                            Name = "Tâm Lý"
                        },
                        new
                        {
                            Id = 10,
                            Color = "#795548",
                            Name = "Gia Đình"
                        });
                });

            modelBuilder.Entity("MovieWebsite.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AverageRating")
                        .HasColumnType("REAL");

                    b.Property<string>("Cast")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("EnglishTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("GenreId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Poster")
                        .HasColumnType("TEXT");

                    b.Property<string>("PosterBanner")
                        .HasColumnType("TEXT");

                    b.Property<string>("PosterDoc")
                        .HasColumnType("TEXT");

                    b.Property<string>("PosterPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RatingCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalEpisodes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TrailerPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Views")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("GenreId");

                    b.HasIndex("ReleaseYear");

                    b.HasIndex("Title");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AverageRating = 8.5,
                            Cast = "Trần Nghĩa, Trúc Anh",
                            CountryId = 1,
                            CreatedAt = new DateTime(2022, 4, 10, 0, 32, 45, 809, DateTimeKind.Utc).AddTicks(8030),
                            Description = "Chuyện phim kể về mối tình si của chàng trai Ngạn dành cho Hà Lan từ thuở thiếu thời...",
                            Director = "Victor Vũ",
                            EnglishTitle = "Dreamy Eyes",
                            GenreId = 2,
                            IsCompleted = true,
                            Poster = "/Uploads/images/1.png",
                            PosterBanner = "/Uploads/images/1.png",
                            PosterDoc = "/Uploads/images/1.png",
                            PosterPath = "/Uploads/images/1.png",
                            RatingCount = 25000,
                            ReleaseYear = 2019,
                            Title = "Mắt Biếc",
                            TotalEpisodes = 2,
                            TrailerPath = "/Uploads/trailer/1.mp4",
                            UpdatedAt = new DateTime(2022, 4, 10, 0, 32, 45, 809, DateTimeKind.Utc).AddTicks(8030),
                            Views = 1500000
                        },
                        new
                        {
                            Id = 2,
                            AverageRating = 7.7999999999999998,
                            Cast = "Thái Hòa, Kiều Minh Tuấn",
                            CountryId = 1,
                            CreatedAt = new DateTime(2022, 10, 27, 0, 32, 45, 809, DateTimeKind.Utc).AddTicks(8030),
                            Description = "Một buổi tối tụ họp bạn bè bỗng trở nên căng thẳng khi mọi người quyết định chơi một trò chơi...",
                            Director = "Nguyễn Quang Dũng",
                            EnglishTitle = "Full House (Vietnamese)",
                            GenreId = 3,
                            IsCompleted = true,
                            Poster = "/Uploads/images/2.png",
                            PosterBanner = "/Uploads/images/2.png",
                            PosterDoc = "/Uploads/images/2.png",
                            PosterPath = "/Uploads/images/2.png",
                            RatingCount = 18000,
                            ReleaseYear = 2020,
                            Title = "Tiệc Trăng Máu",
                            TotalEpisodes = 2,
                            TrailerPath = "/Uploads/trailer/2.mp4",
                            UpdatedAt = new DateTime(2022, 10, 27, 0, 32, 45, 809, DateTimeKind.Utc).AddTicks(8030),
                            Views = 1200000
                        },
                        new
                        {
                            Id = 3,
                            AverageRating = 8.8000000000000007,
                            Cast = "Trấn Thành, Tuấn Trần",
                            CountryId = 1,
                            CreatedAt = new DateTime(2023, 2, 4, 0, 32, 45, 809, DateTimeKind.Utc).AddTicks(8030),
                            Description = "Câu chuyện cảm động về tình cha con, những xung đột thế hệ và tình làng nghĩa xóm...",
                            Director = "Vũ Ngọc Đãng",
                            EnglishTitle = "Dad, I'm Sorry",
                            GenreId = 10,
                            IsCompleted = true,
                            Poster = "/Uploads/images/3.png",
                            PosterBanner = "/Uploads/images/3.png",
                            PosterDoc = "/Uploads/images/3.png",
                            PosterPath = "/Uploads/images/3.png",
                            RatingCount = 35000,
                            ReleaseYear = 2021,
                            Title = "Bố Già",
                            TotalEpisodes = 2,
                            TrailerPath = "/Uploads/trailer/3.mp4",
                            UpdatedAt = new DateTime(2023, 2, 4, 0, 32, 45, 809, DateTimeKind.Utc).AddTicks(8030),
                            Views = 2000000
                        },
                        new
                        {
                            Id = 4,
                            AverageRating = 9.1999999999999993,
                            Cast = "Song Kang-ho, Choi Woo-shik",
                            CountryId = 2,
                            CreatedAt = new DateTime(2021, 6, 14, 0, 32, 45, 809, DateTimeKind.Utc).AddTicks(8030),
                            Description = "Một gia đình nghèo tìm cách 'ký sinh' vào cuộc sống của một gia đình giàu có...",
                            Director = "Bong Joon Ho",
                            EnglishTitle = "Parasite",
                            GenreId = 7,
                            IsCompleted = true,
                            Poster = "/Uploads/images/4.png",
                            PosterBanner = "/Uploads/images/4.png",
                            PosterDoc = "/Uploads/images/4.png",
                            PosterPath = "/Uploads/images/4.png",
                            RatingCount = 28000,
                            ReleaseYear = 2019,
                            Title = "Ký Sinh Trùng",
                            TotalEpisodes = 2,
                            TrailerPath = "/Uploads/trailer/4.mp4",
                            UpdatedAt = new DateTime(2021, 6, 14, 0, 32, 45, 809, DateTimeKind.Utc).AddTicks(8030),
                            Views = 1800000
                        });
                });

            modelBuilder.Entity("MovieWebsite.Models.MovieGenre", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GenreId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MovieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MovieGenres");

                    b.HasData(
                        new
                        {
                            MovieId = 1,
                            GenreId = 2
                        },
                        new
                        {
                            MovieId = 1,
                            GenreId = 7
                        },
                        new
                        {
                            MovieId = 2,
                            GenreId = 3
                        },
                        new
                        {
                            MovieId = 2,
                            GenreId = 4
                        },
                        new
                        {
                            MovieId = 3,
                            GenreId = 10
                        },
                        new
                        {
                            MovieId = 3,
                            GenreId = 7
                        },
                        new
                        {
                            MovieId = 4,
                            GenreId = 7
                        },
                        new
                        {
                            MovieId = 4,
                            GenreId = 3
                        });
                });

            modelBuilder.Entity("MovieWebsite.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EpisodeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int?>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("MovieWebsite.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("MovieWebsite.Models.Reel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Likes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ThumbnailPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("UploaderId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VideoPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Views")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UploaderId");

                    b.ToTable("Reels");
                });

            modelBuilder.Entity("MovieWebsite.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("EntryType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EpisodeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ScheduledTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("MovieId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("MovieWebsite.Models.UserFavoriteMovie", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("UserFavoriteMovies");
                });

            modelBuilder.Entity("MovieWebsite.Models.WatchPartyRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AutoStart")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CurrentEpisodeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InviteCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SelectedPosterUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("WatchPartyRooms");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MovieWebsite.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MovieWebsite.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieWebsite.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MovieWebsite.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieWebsite.Models.Comment", b =>
                {
                    b.HasOne("MovieWebsite.Models.Episode", "Episode")
                        .WithMany()
                        .HasForeignKey("EpisodeId");

                    b.HasOne("MovieWebsite.Models.Movie", "Movie")
                        .WithMany("Comments")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieWebsite.Models.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Episode");

                    b.Navigation("Movie");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("MovieWebsite.Models.Episode", b =>
                {
                    b.HasOne("MovieWebsite.Models.Movie", "Movie")
                        .WithMany("Episodes")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieWebsite.Models.Movie", b =>
                {
                    b.HasOne("MovieWebsite.Models.Country", "Country")
                        .WithMany("Movies")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieWebsite.Models.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("MovieWebsite.Models.MovieGenre", b =>
                {
                    b.HasOne("MovieWebsite.Models.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieWebsite.Models.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieWebsite.Models.Notification", b =>
                {
                    b.HasOne("MovieWebsite.Models.Episode", "Episode")
                        .WithMany()
                        .HasForeignKey("EpisodeId");

                    b.HasOne("MovieWebsite.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId");

                    b.HasOne("MovieWebsite.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieWebsite.Models.Rating", b =>
                {
                    b.HasOne("MovieWebsite.Models.Movie", "Movie")
                        .WithMany("Ratings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieWebsite.Models.Reel", b =>
                {
                    b.HasOne("MovieWebsite.Models.AppUser", "Uploader")
                        .WithMany()
                        .HasForeignKey("UploaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("MovieWebsite.Models.Schedule", b =>
                {
                    b.HasOne("MovieWebsite.Models.Episode", "Episode")
                        .WithMany("Schedules")
                        .HasForeignKey("EpisodeId");

                    b.HasOne("MovieWebsite.Models.Movie", "Movie")
                        .WithMany("Schedules")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieWebsite.Models.UserFavoriteMovie", b =>
                {
                    b.HasOne("MovieWebsite.Models.Movie", "Movie")
                        .WithMany("FavoritedByUsers")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MovieWebsite.Models.AppUser", "AppUser")
                        .WithMany("FavoriteMovies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieWebsite.Models.WatchPartyRoom", b =>
                {
                    b.HasOne("MovieWebsite.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieWebsite.Models.AppUser", b =>
                {
                    b.Navigation("FavoriteMovies");
                });

            modelBuilder.Entity("MovieWebsite.Models.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("MovieWebsite.Models.Country", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("MovieWebsite.Models.Episode", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("MovieWebsite.Models.Genre", b =>
                {
                    b.Navigation("MovieGenres");

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("MovieWebsite.Models.Movie", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Episodes");

                    b.Navigation("FavoritedByUsers");

                    b.Navigation("MovieGenres");

                    b.Navigation("Ratings");

                    b.Navigation("Schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
