@* @model MovieWebsite.Models.WatchPartyRoom
@{
    ViewData["Title"] = "Xem chung: " + Model.Movie.Title;
    ViewBag.CurrentMovieId = Model.MovieId;
    var firstEpisode = Model.Movie.Episodes?.OrderBy(e => e.EpisodeNumber).FirstOrDefault();
    var videoUrl = firstEpisode?.VideoPath;
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <!-- TailwindCSS CDN -->
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body class="bg-gray-900 text-white">
    <div class="container mx-auto px-4 py-6 max-w-7xl">
        <!-- Header -->
        <div class="mb-6">
            <h1 class="text-2xl md:text-3xl font-bold">@ViewData["Title"]</h1>
            <p class="text-green-400 mt-2">
                Mã mời: <span class="font-semibold">@Model.InviteCode</span> 
                <button id="copy-invite" class="ml-2 text-sm bg-green-600 hover:bg-green-700 text-white px-2 py-1 rounded transition duration-200">
                    <i class="fas fa-copy"></i> Sao chép
                </button>
            </p>
        </div>

        <!-- Main Layout -->
        <div class="flex flex-col lg:flex-row gap-6">
            <!-- Video Player (2/3 width) -->
            <div class="lg:w-2/3">
                @if (!string.IsNullOrEmpty(videoUrl))
                {
                    <div class="relative">
                        <video id="movie-player" src="@videoUrl" controls class="w-full bg-black rounded-lg shadow-lg" style="aspect-ratio: 16/9;"></video>
                        <!-- Video Status Overlay -->
                        <div id="video-status" class="absolute top-4 left-4 bg-black bg-opacity-70 text-white px-3 py-1 rounded text-sm">
                            <span id="viewer-count">0 người đang xem</span> | <span id="current-time">0:00</span>
                        </div>
                    </div>
                }
                else
                {
                    <div class="bg-yellow-600 text-black p-4 rounded-lg">
                        Rất tiếc, phim này hiện chưa có video để phát.
                    </div>
                }
            </div>

            <!-- Sidebar (1/3 width) -->
            <div class="lg:w-1/3 flex flex-col gap-6">
                <!-- Participants List -->
                <div class="bg-gray-800 p-4 rounded-lg shadow-lg">
                    <h2 class="text-lg font-semibold mb-3"><i class="fas fa-users mr-2"></i>Người tham gia</h2>
                    <ul id="participants-list" class="space-y-3 max-h-48 overflow-y-auto">
                        <!-- Dynamic list populated by JS -->
                    </ul>
                </div>

                <!-- Live Chat -->
                <div class="bg-gray-800 p-4 rounded-lg shadow-lg flex-1 flex flex-col">
                    <h2 class="text-lg font-semibold mb-3"><i class="fas fa-comments mr-2"></i>Live Chat</h2>
                    <div id="chat-box" class="flex-1 bg-gray-700 p-3 rounded mb-3 overflow-y-auto" style="max-height: 400px;">
                        <!-- Dynamic chat messages -->
                    </div>
                    <div class="flex gap-2">
                        <input type="text" id="message-input" class="flex-1 bg-gray-600 text-white p-2 rounded focus:outline-none focus:ring-2 focus:ring-green-500" placeholder="Nhập bình luận...">
                        <button id="send-button" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded transition duration-200">
                            Gửi
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- SignalR and JavaScript -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
    <script>
        (function () {
            // --- Khai báo biến ---
            const chatBox = document.getElementById('chat-box');
            const video = document.getElementById('movie-player');
            const messageInput = document.getElementById('message-input');
            const sendButton = document.getElementById('send-button');
            const participantsList = document.getElementById('participants-list');
            const viewerCount = document.getElementById('viewer-count');
            const currentTime = document.getElementById('current-time');
            const copyInvite = document.getElementById('copy-invite');
            const inviteCode = "@Model.InviteCode";
            const userName = "User" + Math.floor(Math.random() * 1000);
            let messages = [];
            let participants = new Set();

            // Kiểm tra elements
            if (!chatBox || !messageInput || !sendButton || !participantsList) {
                console.error("Không tìm thấy các thành phần UI.");
                return;
            }

            // --- Hàm xử lý ---
            function formatTime(seconds) {
                const min = Math.floor(seconds / 60);
                const sec = Math.floor(seconds % 60);
                return `${min}:${sec < 10 ? '0' : ''}${sec}`;
            }

            function renderChat() {
                chatBox.innerHTML = messages.map(msg => `
                    <div class="mb-2 ${msg.type === 'notification' ? 'text-gray-400 italic' : ''}">
                        ${msg.type === 'message' ? `<strong class="text-green-400">${msg.user}:</strong> ${msg.message}` : msg.message}
                    </div>
                `).join('');
                chatBox.scrollTop = chatBox.scrollHeight;
            }

            function renderParticipants() {
                participantsList.innerHTML = Array.from(participants).map(user => `
                    <li class="flex items-center gap-2">
                        <img src="https://via.placeholder.com/32" alt="avatar" class="w-8 h-8 rounded-full">
                        <span class="text-sm">${user}</span>
                    </li>
                `).join('');
                viewerCount.textContent = `${participants.size} người đang xem`;
            }

            function updateVideoTime() {
                if (video) {
                    currentTime.textContent = formatTime(video.currentTime);
                }
            }

            // --- SignalR ---
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/watchPartyHub")
                .configureLogging(signalR.LogLevel.Information)
                .build();

            connection.on("ReceiveMessage", (user, message) => {
                messages.push({ type: 'message', user, message });
                renderChat();
            });

            connection.on("UserJoined", (user, message) => {
                participants.add(user);
                messages.push({ type: 'notification', message });
                renderParticipants();
                renderChat();
            });

            connection.on("UserLeft", (user, message) => {
                participants.delete(user);
                messages.push({ type: 'notification', message });
                renderParticipants();
                renderChat();
            });

            if (video) {
                let isSyncing = false;
                connection.on("ReceiveVideoState", (state, currentTime) => {
                    isSyncing = true;
                    video.currentTime = currentTime;
                    if (state === "play" && video.paused) video.play();
                    else if (state === "pause" && !video.paused) video.pause();
                    setTimeout(() => { isSyncing = false; }, 200);
                });

                const sendState = () => {
                    if (isSyncing) return;
                    connection.invoke("SyncVideoState", inviteCode, video.paused ? "pause" : "play", video.currentTime);
                };

                video.onplay = sendState;
                video.onpause = sendState;
                video.onseeked = sendState;
                video.ontimeupdate = updateVideoTime;
            }

            // --- Sự kiện ---
            sendButton.addEventListener('click', () => {
                const message = messageInput.value.trim();
                if (message) {
                    connection.invoke("SendMessage", inviteCode, userName, message)
                        .catch(err => console.error("Lỗi gửi tin nhắn:", err));
                    messageInput.value = '';
                }
            });

            messageInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') sendButton.click();
            });

            copyInvite.addEventListener('click', () => {
                navigator.clipboard.writeText(inviteCode);
                copyInvite.innerHTML = '<i class="fas fa-check"></i> Đã sao chép';
                setTimeout(() => {
                    copyInvite.innerHTML = '<i class="fas fa-copy"></i> Sao chép';
                }, 2000);
            });

            // --- Khởi động ---
            async function start() {
                try {
                    await connection.start();
                    await connection.invoke("JoinRoom", inviteCode, userName);
                    participants.add(userName);
                    renderParticipants();
                } catch (err) {
                    console.error("Lỗi kết nối SignalR, thử lại sau 5s:", err);
                    setTimeout(start, 5000);
                }
            }
            start();

            // Xử lý ngắt kết nối
            connection.onclose(() => {
                console.log("Kết nối SignalR bị đóng, thử kết nối lại...");
                start();
            });
        })();
    </script>
</body>
</html> *@

@* @model MovieWebsite.Models.WatchPartyRoom
@{
    ViewData["Title"] = "Xem chung: " + Model.Movie.Title;
    ViewBag.CurrentMovieId = Model.MovieId;
    var firstEpisode = Model.Movie.Episodes?.OrderBy(e => e.EpisodeNumber).FirstOrDefault();
    var videoUrl = firstEpisode?.VideoPath;
    var duration = Model.Movie.Episodes?.Sum(e => e.Duration) ?? 90;
    var rating = Model.Movie.AverageRating.ToString("0.0");
    var genreName = Model.Movie.Genre?.Name ?? "Đang cập nhật";
    var countryName = Model.Movie.Country?.Name ?? "Đang cập nhật";
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <!-- TailwindCSS CDN -->
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">
    <style>
        /* --- TÔNG MÀU MỚI VÀ HIỆU ỨNG --- */
        :root {
            --bg-primary: #111827; /* bg-slate-900 */
            --bg-secondary: #1F2937; /* bg-slate-800 */
            --border-color: #374151; /* border-slate-700 */
            --accent-color: #6366F1; /* indigo-500 */
            --text-primary: #D1D5DB; /* text-slate-300 */
            --text-secondary: #9CA3AF; /* text-slate-400 */
        }

        body {
            background-color: var(--bg-primary);
            color: var(--text-primary);
        }

        /* --- Scrollbar tùy chỉnh cho bảng điều khiển --- */
        .custom-scroll::-webkit-scrollbar { width: 8px; }
        .custom-scroll::-webkit-scrollbar-track { background: transparent; }
        .custom-scroll::-webkit-scrollbar-thumb {
            background-color: var(--border-color);
            border-radius: 20px;
            border: 3px solid transparent;
            background-clip: content-box;
        }
        .custom-scroll::-webkit-scrollbar-thumb:hover { background-color: var(--accent-color); }
        .custom-scroll { scrollbar-color: var(--border-color) transparent; scrollbar-width: thin; }

        /* --- Hiệu ứng tin nhắn mới --- */
        @@keyframes slideInUp {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .chat-message-new { animation: slideInUp 0.4s ease-out; }

        /* --- Hiệu ứng chuyển tab --- */
        @@keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        .tab-content { animation: fadeIn 0.3s ease-in-out; }

        /* Đảm bảo video có tỷ lệ 16:9 */
        .video-aspect-ratio {
            position: relative;
            width: 100%;
            padding-top: 56.25%; /* 16:9 */
        }
        .video-aspect-ratio video {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
    </style>
</head>
<body class="min-h-screen flex flex-col antialiased">

    <!-- HEADER: Tối giản, tập trung vào thông tin cần thiết -->
    <header class="w-full px-6 py-3 bg-slate-900/80 backdrop-blur-sm border-b border-slate-700 z-10">
        <div class="max-w-screen-2xl mx-auto flex justify-between items-center">
            <div class="flex items-center gap-4">
                <h1 class="text-xl md:text-2xl font-bold text-white truncate">@Model.Movie.Title</h1>
                <span class="bg-indigo-500 text-white text-xs font-bold px-3 py-1 rounded-full">PARTY</span>
            </div>
            <div class="flex items-center gap-3">
                 <div class="hidden md:flex items-center gap-2 text-sm bg-slate-800 px-3 py-1.5 rounded-full">
                     <i class="fas fa-users text-indigo-400"></i>
                     <span id="viewer-count" class="font-medium">0</span>
                     <span class="text-slate-500">|</span>
                     <i class="fas fa-clock text-indigo-400"></i>
                     <span id="current-time" class="font-medium">0:00</span>
                 </div>
                <button id="copy-invite" class="bg-slate-700 hover:bg-slate-600 text-white px-4 py-2 rounded-full text-sm transition-colors duration-200 flex items-center gap-2">
                    <i class="fas fa-share-alt"></i>
                    <span class="hidden md:inline">Mời bạn bè</span>
                </button>
            </div>
        </div>
    </header>

    <!-- MAIN CONTENT: Layout chính với Player và Bảng điều khiển -->
    <main class="flex-1 flex flex-col lg:flex-row gap-4 p-4 lg:p-6 max-w-screen-2xl mx-auto w-full overflow-hidden">
        
        <!-- Player Section -->
        <div class="flex-1 flex flex-col min-w-0">
             @if (!string.IsNullOrEmpty(videoUrl))
            {
                <div class="video-aspect-ratio bg-black rounded-xl shadow-2xl shadow-black/50">
                    <video id="movie-player" src="@videoUrl" controls class="rounded-xl"></video>
                </div>
            }
            else
            {
                 <div class="w-full h-full bg-slate-800 rounded-xl flex flex-col justify-center items-center text-center p-8">
                     <i class="fas fa-video-slash text-6xl text-slate-500 mb-4"></i>
                     <h3 class="text-2xl font-bold text-white">Video không khả dụng</h3>
                     <p class="text-slate-400 mt-2">Rất tiếc, không tìm thấy video cho phim này.</p>
                 </div>
            }
        </div>

        <!-- Interaction Panel (Sidebar) -->
        <aside class="w-full lg:w-96 lg:max-w-sm flex flex-col bg-slate-800/50 backdrop-blur-sm rounded-xl border border-slate-700 overflow-hidden">
            
            <!-- Horizontal Participants List -->
            <div class="p-4 border-b border-slate-700">
                <h3 class="text-sm font-semibold text-slate-400 mb-3">ĐANG XEM CÙNG (<span id="participant-count">0</span>)</h3>
                <div id="participants-list" class="flex items-center gap-3 overflow-x-auto pb-2 custom-scroll -mb-2">
                    <!-- JS sẽ render avatar vào đây -->
                    <!-- Ví dụ: -->
                    <!-- <div class="text-center flex-shrink-0">
                        <img src="https://ui-avatars.com/api/?name=You" class="w-14 h-14 rounded-full border-2 border-indigo-500">
                        <p class="text-xs mt-1 truncate w-14">Bạn</p>
                    </div> -->
                </div>
            </div>

            <!-- Tab Controls -->
            <div class="flex border-b border-slate-700">
                <button data-tab="chat" class="tab-btn flex-1 py-3 text-sm font-semibold border-b-2 border-indigo-500 text-white transition-colors duration-200">
                    <i class="fas fa-comments mr-2"></i> Chat
                </button>
                <button data-tab="info" class="tab-btn flex-1 py-3 text-sm font-semibold border-b-2 border-transparent text-slate-400 hover:text-white transition-colors duration-200">
                    <i class="fas fa-info-circle mr-2"></i> Thông tin
                </button>
            </div>
            
            <!-- Tab Content -->
            <div class="flex-1 flex flex-col overflow-hidden">
                <!-- Chat Panel -->
                <div id="chat-panel" class="tab-content flex-1 flex flex-col overflow-hidden">
                    <div id="chat-box" class="flex-1 p-4 space-y-4 overflow-y-auto custom-scroll">
                        <!-- JS sẽ render tin nhắn vào đây -->
                        <div class="text-center text-slate-500 py-8">
                            <i class="far fa-comments text-4xl"></i>
                            <p class="mt-2 text-sm">Chào mừng tới phòng xem chung!</p>
                        </div>
                    </div>
                    <!-- Chat Input -->
                    <div class="p-4 border-t border-slate-700 bg-slate-800">
                        <div class="relative">
                             <input type="text" id="message-input" class="w-full bg-slate-700 text-white pl-4 pr-12 py-3 rounded-full focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-shadow duration-200" placeholder="Gửi một tin nhắn...">
                            <button id="send-button" class="absolute right-2 top-1/2 -translate-y-1/2 bg-indigo-600 hover:bg-indigo-500 text-white w-9 h-9 rounded-full transition-colors duration-200 flex items-center justify-center">
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Info Panel -->
                <div id="info-panel" class="tab-content hidden flex-1 p-6 overflow-y-auto custom-scroll space-y-4">
                     <h3 class="text-xl font-bold text-white">@Model.Movie.Title</h3>
                     <p class="text-sm text-slate-300">@Model.Movie.Description</p>
                     <div class="border-t border-slate-700 pt-4 space-y-3 text-sm">
                        <div class="flex justify-between">
                            <span class="text-slate-400">Đánh giá</span>
                            <span class="font-semibold text-white flex items-center gap-1"><i class="fas fa-star text-yellow-400"></i> @rating/10</span>
                        </div>
                         <div class="flex justify-between">
                            <span class="text-slate-400">Năm</span>
                            <span class="font-semibold text-white">@Model.Movie.ReleaseYear</span>
                        </div>
                         <div class="flex justify-between">
                            <span class="text-slate-400">Thể loại</span>
                            <span class="font-semibold text-white">@genreName</span>
                        </div>
                         <div class="flex justify-between">
                            <span class="text-slate-400">Quốc gia</span>
                            <span class="font-semibold text-white">@countryName</span>
                        </div>
                         <div class="flex justify-between">
                            <span class="text-slate-400">Thời lượng</span>
                            <span class="font-semibold text-white">@duration phút</span>
                        </div>
                     </div>
                </div>
            </div>
        </aside>
    </main>

    <!-- SignalR and JavaScript -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
    <script>
        // --- GIỮ NGUYÊN HOÀN TOÀN SCRIPT CŨ CỦA BẠN ---
        // --- THÊM PHẦN LOGIC MỚI CHO TAB ---
        
        // Bọc toàn bộ script trong một hàm IIFE để tránh xung đột
        (function () {
            
            // --- LOGIC MỚI CHO TAB UI ---
            const tabButtons = document.querySelectorAll('.tab-btn');
            const tabContents = document.querySelectorAll('.tab-content');

            tabButtons.forEach(button => {
                button.addEventListener('click', () => {
                    // Xóa trạng thái active của tất cả button
                    tabButtons.forEach(btn => {
                        btn.classList.remove('text-white', 'border-indigo-500');
                        btn.classList.add('text-slate-400', 'border-transparent');
                    });
                    
                    // Thêm trạng thái active cho button được click
                    button.classList.add('text-white', 'border-indigo-500');
                    button.classList.remove('text-slate-400', 'border-transparent');
                    
                    const targetTab = button.dataset.tab;
                    
                    // Ẩn tất cả nội dung tab
                    tabContents.forEach(content => {
                        content.classList.add('hidden');
                    });
                    
                    // Hiển thị nội dung tab tương ứng
                    document.getElementById(`${targetTab}-panel`).classList.remove('hidden');
                });
            });

            // --- SCRIPT GỐC CỦA BẠN (với một vài chỉnh sửa nhỏ để phù hợp layout mới) ---
            const chatBox = document.getElementById('chat-box');
            const video = document.getElementById('movie-player');
            const messageInput = document.getElementById('message-input');
            const sendButton = document.getElementById('send-button');
            const participantsList = document.getElementById('participants-list');
            const viewerCount = document.getElementById('viewer-count'); // Header
            const participantCount = document.getElementById('participant-count'); // Sidebar
            const currentTime = document.getElementById('current-time'); // Header
            const copyInvite = document.getElementById('copy-invite');
            const inviteCode = "@Model.InviteCode";
            const userName = "User" + Math.floor(Math.random() * 1000);
            let messages = [];
            let participants = new Set();

            if (!chatBox || !messageInput || !sendButton || !participantsList) {
                console.error("Không tìm thấy các thành phần UI.");
                return;
            }

            function formatTime(seconds) {
                const min = Math.floor(seconds / 60);
                const sec = Math.floor(seconds % 60);
                return `${min}:${sec < 10 ? '0' : ''}${sec}`;
            }

            function renderChat() {
                 if (messages.length === 0) {
                     chatBox.innerHTML = `
                        <div class="text-center text-slate-500 py-8">
                            <i class="far fa-comments text-4xl"></i>
                            <p class="mt-2 text-sm">Chào mừng tới phòng xem chung!</p>
                        </div>
                    `;
                    return;
                }
                
                chatBox.innerHTML = messages.map(msg => {
                    // Thêm class 'chat-message-new' để có hiệu ứng
                    const messageClass = `chat-message-new ${msg.type === 'notification' ? 'text-center text-slate-400 italic text-sm' : ''}`;
                    
                    return `
                        <div class="${messageClass}">
                            ${msg.type === 'message' ? `
                                <div class="flex gap-3">
                                    <div class="flex-shrink-0">
                                        <img src="https://ui-avatars.com/api/?name=${encodeURIComponent(msg.user)}&background=4F46E5&color=fff&font-size=0.5" 
                                             alt="${msg.user}" class="w-9 h-9 rounded-full">
                                    </div>
                                    <div class="flex-1">
                                        <div class="flex items-baseline gap-2">
                                            <span class="font-semibold text-indigo-400">${msg.user}</span>
                                            <span class="text-xs text-slate-500">${new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</span>
                                        </div>
                                        <p class="text-slate-200 leading-tight">${msg.message}</p>
                                    </div>
                                </div>
                            ` : `
                                <div class="py-1">${msg.message}</div>
                            `}
                        </div>
                    `;
                }).join('');
                chatBox.scrollTop = chatBox.scrollHeight;
            }

            function renderParticipants() {
                participantsList.innerHTML = Array.from(participants).map(user => `
                    <div class="text-center flex-shrink-0 transition-transform duration-200 hover:-translate-y-1">
                        <img src="https://ui-avatars.com/api/?name=${encodeURIComponent(user)}&background=random&color=fff&size=64" 
                             alt="${user}" class="w-14 h-14 rounded-full object-cover border-2 ${user === userName ? 'border-indigo-500' : 'border-slate-600'} hover:border-indigo-400 transition-colors duration-200">
                        <p class="text-xs text-slate-300 mt-1.5 truncate w-14">${user === userName ? 'Bạn' : user}</p>
                    </div>
                `).join('');
                viewerCount.textContent = participants.size;
                participantCount.textContent = participants.size;
            }

            function updateVideoTime() {
                if (video) {
                    const current = formatTime(video.currentTime);
                    currentTime.textContent = current;
                }
            }
            
            // --- PHẦN SIGNALR GIỮ NGUYÊN NHƯ CŨ ---
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/watchPartyHub")
                .configureLogging(signalR.LogLevel.Information)
                .build();

            connection.on("ReceiveMessage", (user, message) => {
                messages.push({ type: 'message', user, message });
                renderChat();
            });
            // ... (các hàm connection.on khác của bạn) ...
             connection.on("UserJoined", (user, message) => {
                participants.add(user);
                messages.push({ type: 'notification', message: `${user} đã tham gia` });
                renderParticipants();
                renderChat();
            });

            connection.on("UserLeft", (user, message) => {
                participants.delete(user);
                messages.push({ type: 'notification', message: `${user} đã rời đi` });
                renderParticipants();
                renderChat();
            });
             if (video) {
                let isSyncing = false;
                connection.on("ReceiveVideoState", (state, currentTimeVal, syncUser) => {
                    isSyncing = true;
                    // Bỏ thông báo sync để đỡ rối UI
                    video.currentTime = currentTimeVal;
                    if (state === "play" && video.paused) video.play();
                    else if (state === "pause" && !video.paused) video.pause();
                    setTimeout(() => { isSyncing = false; }, 200);
                });

                const sendState = () => {
                    if (isSyncing) return;
                    connection.invoke("SyncVideoState", inviteCode, video.paused ? "pause" : "play", video.currentTime, userName)
                        .catch(err => console.error("Lỗi đồng bộ video:", err));
                };

                video.onplay = sendState;
                video.onpause = sendState;
                video.onseeked = sendState;
                video.ontimeupdate = updateVideoTime;
                
                video.onloadedmetadata = updateVideoTime;
            }

            // --- PHẦN SỰ KIỆN GIỮ NGUYÊN NHƯ CŨ ---
             sendButton.addEventListener('click', () => {
                const message = messageInput.value.trim();
                if (message) {
                    connection.invoke("SendMessage", inviteCode, userName, message)
                        .catch(err => console.error("Lỗi gửi tin nhắn:", err));
                    messageInput.value = '';
                }
            });

            messageInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    sendButton.click();
                }
            });

             copyInvite.addEventListener('click', () => {
                navigator.clipboard.writeText(inviteCode);
                const originalText = copyInvite.innerHTML;
                copyInvite.innerHTML = '<i class="fas fa-check mr-2"></i> Đã sao chép';
                copyInvite.classList.remove('bg-slate-700', 'hover:bg-slate-600');
                copyInvite.classList.add('bg-indigo-600');
                setTimeout(() => {
                    copyInvite.innerHTML = originalText;
                    copyInvite.classList.add('bg-slate-700', 'hover:bg-slate-600');
                    copyInvite.classList.remove('bg-indigo-600');
                }, 2000);
            });

            // --- PHẦN KHỞI ĐỘNG GIỮ NGUYÊN NHƯ CŨ ---
             async function start() {
                try {
                    await connection.start();
                    await connection.invoke("JoinRoom", inviteCode, userName);
                    participants.add(userName);
                    renderParticipants();
                    
                    messages.push({ 
                        type: 'notification', 
                        message: `Mời bạn bè bằng mã: <span class="font-semibold text-indigo-400">${inviteCode}</span>` 
                    });
                    renderChat();
                } catch (err) {
                    console.error("Lỗi kết nối SignalR, thử lại sau 5s:", err);
                    setTimeout(start, 5000);
                }
            }
            start();

            // ... (phần còn lại của script) ...
             connection.onclose(() => {
                console.log("Kết nối SignalR bị đóng, thử kết nối lại...");
                // Thêm thông báo UI nếu muốn
                start();
            });

        })();
    </script>
</body>
</html> *@

@model MovieWebsite.Models.WatchPartyRoom
@{
    ViewData["Title"] = "Xem chung: " + Model.Movie.Title;
    ViewBag.CurrentMovieId = Model.MovieId;
    var movieTitle = Model.Movie?.Title ?? "Không có tiêu đề";
    var genreName = Model.Movie?.Genre?.Name ?? "Chưa có thể loại";
    var firstEpisode = Model.Movie?.Episodes?.OrderBy(e => e.EpisodeNumber).FirstOrDefault();
    var videoUrl = firstEpisode?.VideoPath;
    var duration = firstEpisode?.Duration ?? 0;
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <!-- Đảm bảo bạn đã thêm các thay đổi CSS ở trên vào file này -->
    <link rel="stylesheet" href="~/css/watchparty.css" asp-append-version="true">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
    
    <!-- === BỐ CỤC ĐÃ ĐƯỢC SỬA LẠI THEO YÊU CẦU === -->
    <main class="main-container">
        <!-- 1. Header đã được chuyển vào trong main -->
        <header class="header">
            <div class="header-content">
                <div class="movie-info">
                    <h1 class="movie-title">@movieTitle</h1>
                    <div class="movie-meta">
                        @* <span class="genre">@genreName</span> *@
                        <span class="duration">@duration phút</span>
                    </div>
                </div>
                <div class="room-controls">
                    <div class="invite-section">
                        <span class="invite-label">Mã mời:</span>
                        <div class="invite-code-container">
                            <span class="invite-code">@Model.InviteCode</span>
                            <button class="copy-btn" id="copy-invite" data-invite-code="@Model.InviteCode">
                                <i class="fas fa-copy"></i>
                            </button>
                        </div>
                    </div>
                    <div class="live-indicator"><div class="pulse-dot"></div><span>LIVE</span></div>
                </div>
            </div>
        </header>

        <section class="video-section">
            <div class="video-container">
                @if (!string.IsNullOrEmpty(videoUrl))
                {
                    <video id="movie-player" src="@videoUrl" controls class="video-player"></video>
                    <div class="video-overlay">
                        <div class="playback-info">
                            <div class="viewer-count"><i class="fas fa-eye"></i> <span id="viewer-count">0 người xem</span></div>
                            <div class="current-time"><i class="fas fa-clock"></i> <span id="current-time">0:00</span></div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="no-video-message"><i class="fas fa-exclamation-triangle"></i><p>Rất tiếc, phim này hiện chưa có video để phát.</p></div>
                }
            </div>
            <div class="video-controls-bar">
                <div class="sync-status"><div class="sync-indicator active"><i class="fas fa-sync"></i> <span>Đang đồng bộ</span></div></div>
                <div class="video-info"><span class="video-quality">HD Quality</span></div>
            </div>
        </section>

        <section class="social-section">
            <!-- 2. Chat Panel đã được đưa lên trên -->
            <div class="chat-panel">
                <div class="panel-header">
                    <h3 class="panel-title"><i class="fas fa-comments"></i> Live Chat</h3>
                    <div class="chat-actions"><button class="action-btn" title="Settings"><i class="fas fa-cog"></i></button></div>
                </div>
                <div class="chat-messages" id="chat-box"></div>
                <div class="chat-input-container">
                    <div class="chat-input-wrapper">
                        <input type="text" id="message-input" class="chat-input" placeholder="Nhập bình luận...">
                        <button class="emoji-btn" title="Emoji"><i class="fas fa-smile"></i></button>
                    </div>
                    <button type="button" id="send-button" class="send-btn">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
            </div>

            <!-- Participants Panel đã được đưa xuống dưới -->
            <div class="participants-panel">
                <div class="panel-header">
                    <h3 class="panel-title"><i class="fas fa-users"></i> Người tham gia</h3>
                    <span class="participant-count" id="participant-count">0</span>
                </div>
                <div class="participants-list-container">
                    <ul class="participants-list" id="participants-list-ul">
                    </ul>
                </div>
            </div>
        </section>
    </main>

    <footer class="stats-footer">
        <div class="stats-container">
            <div class="stat-item"><i class="fas fa-play-circle"></i> <span>Đang phát</span></div>
            <div class="stat-item"><i class="fas fa-users"></i> <span id="total-viewers">Đang tải...</span></div>
            <div class="stat-item"><i class="fas fa-comments"></i> <span id="message-count">0 tin nhắn</span></div>
            <div class="stat-item"><i class="fas fa-signal"></i> <span>Kết nối tốt</span></div>
        </div>
    </footer>

    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
    <script>
        // Bọc toàn bộ code trong một hàm IIFE để tránh xung đột biến toàn cục
        (function () {
            // --- KHAI BÁO BIẾN VÀ TRẠNG THÁI ---
            const chatBox = document.getElementById('chat-box');
            const video = document.getElementById('movie-player');
            const messageInput = document.getElementById('message-input');
            const sendButton = document.getElementById('send-button');
            const inviteCode = "@Model.InviteCode";
            const userName = "User" + Math.floor(Math.random() * 1000);

            // Mảng lưu trữ trạng thái của cuộc trò chuyện
            let messages = [];

            // Kiểm tra các element có tồn tại không
            if (!chatBox || !messageInput || !sendButton) {
                console.error("Không tìm thấy các thành phần của khung chat. Script sẽ không chạy.");
                return;
            }

            // --- CÁC HÀM XỬ LÝ ---

            // Hàm để render lại toàn bộ khung chat từ mảng `messages`
            function renderChat() {
                let chatHTML = '';
                for (const msg of messages) {
                    if (msg.type === 'message') {
                        chatHTML += `<div><strong>${msg.user}:</strong> ${msg.message}</div>`;
                    } else if (msg.type === 'notification') {
                        chatHTML += `<div class="text-muted fst-italic">${msg.message}</div>`;
                    }
                }
                chatBox.innerHTML = chatHTML;
                // Luôn cuộn xuống cuối sau khi render
                chatBox.scrollTop = chatBox.scrollHeight;
            }

            // --- THIẾT LẬP KẾT NỐI SIGNALR ---
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/watchPartyHub")
                .configureLogging(signalR.LogLevel.Information) // Bật log chi tiết để dễ debug
                .build();

            // Lắng nghe tin nhắn mới
            connection.on("ReceiveMessage", (user, message) => {
                console.log("Đã nhận tin nhắn:", message);
                messages.push({ type: 'message', user: user, message: message });
                renderChat();
            });

            // Lắng nghe thông báo người dùng tham gia
            connection.on("UserJoined", (message) => {
                console.log("Đã nhận thông báo:", message);
                messages.push({ type: 'notification', message: message });
                renderChat();
            });

            // Lắng nghe sự kiện đồng bộ video (nếu có video)
            if (video) {
                let isSyncing = false;
                connection.on("ReceiveVideoState", (state, currentTime) => {
                    isSyncing = true;
                    video.currentTime = currentTime;
                    if (state === "play" && video.paused) video.play();
                    else if (state === "pause" && !video.paused) video.pause();
                    setTimeout(() => { isSyncing = false; }, 200);
                });

                const sendState = () => {
                    if (isSyncing) return;
                    connection.invoke("SyncVideoState", inviteCode, video.paused ? "pause" : "play", video.currentTime);
                };
                video.onplay = sendState;
                video.onpause = sendState;
                video.onseeked = sendState;
            }

            // --- GẮN SỰ KIỆN VÀ BẮT ĐẦU KẾT NỐI ---

            // Gửi tin nhắn khi nhấn nút
            sendButton.addEventListener('click', () => {
                const message = messageInput.value;
                if (message && message.trim() !== '') {
                    connection.invoke("SendMessage", inviteCode, userName, message)
                        .catch(err => console.error("Lỗi khi gửi tin nhắn:", err));
                    messageInput.value = '';
                }
            });

            // Bắt đầu kết nối
            async function start() {
                try {
                    await connection.start();
                    console.log("SignalR Connected.");
                    await connection.invoke("JoinRoom", inviteCode, userName);
                } catch (err) {
                    console.error("Lỗi kết nối SignalR, thử lại sau 5s...", err);
                    setTimeout(start, 5000);
                }
            }
            start();
        })();
    </script>



    @* <!-- SCRIPT KHÔNG THAY ĐỔI -->

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
    <script>
        (function () {
            const chatBox = document.getElementById('chat-box');
            const video = document.getElementById('movie-player');
            const messageInput = document.getElementById('message-input');
            const sendButton = document.getElementById('send-button');
            const participantsList = document.getElementById('participants-list-ul');
            const viewerCountSpan = document.getElementById('viewer-count');
            const participantCountSpan = document.getElementById('participant-count');
            const totalViewersSpan = document.getElementById('total-viewers');
            const messageCountSpan = document.getElementById('message-count');
            const currentTimeSpan = document.getElementById('current-time');
            const copyInviteButton = document.getElementById('copy-invite');
            const inviteCode = "@Model.InviteCode";
            const userName = "User" + Math.floor(Math.random() * 1000);
            
            let messages = [];
            let participants = new Set();

            if (!chatBox || !messageInput || !sendButton || !participantsList || !copyInviteButton) {
                console.error("LỖI NGHIÊM TRỌNG: Một hoặc nhiều thành phần giao diện chính không được tìm thấy. Script sẽ không chạy.");
                return;
            }

            function renderChat() {
                chatBox.innerHTML = messages.map(msg => {
                    const timeString = new Date().toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' });
                    if (msg.type === 'message') {
                        return `<div class="message user"><div class="message-avatar"><img src="https://ui-avatars.com/api/?name=${encodeURIComponent(msg.user)}" alt="Avatar"></div><div class="message-content"><div class="message-header"><span class="message-author">${msg.user}</span><span class="message-time">${timeString}</span></div><div class="message-text">${msg.message}</div></div></div>`;
                    } else {
                        return `<div class="message system"><i class="fas fa-info-circle"></i><span>${msg.message}</span></div>`;
                    }
                }).join('');
                chatBox.scrollTop = chatBox.scrollHeight;
                if (messageCountSpan) messageCountSpan.textContent = `${messages.length} tin nhắn`;
            }

            function renderParticipants() {
                participantsList.innerHTML = Array.from(participants).map(user => `
                    <li class="participant ${user === userName ? 'active' : ''}">
                        <div class="avatar"><img src="https://ui-avatars.com/api/?name=${encodeURIComponent(user)}" alt="Avatar"><div class="status-dot online"></div></div>
                        <div class="participant-info"><span class="username">${user}</span><span class="user-status">${user === userName ? 'Bạn' : 'Đang xem'}</span></div>
                    </li>`).join('');
                
                const count = participants.size;
                if (viewerCountSpan) viewerCountSpan.textContent = `${count} người xem`;
                if (participantCountSpan) participantCountSpan.textContent = count;
                if (totalViewersSpan) totalViewersSpan.textContent = `${count} người xem`;
            }
            
            const connection = new signalR.HubConnectionBuilder().withUrl("/watchPartyHub").build();

            connection.on("ReceiveMessage", (user, message) => {
                messages.push({ type: 'message', user, message });
                renderChat();
            });

            connection.on("UserJoined", (user, message) => {
                if (!participants.has(user)) {
                    participants.add(user);
                    messages.push({ type: 'notification', message });
                    renderParticipants();
                    renderChat();
                }
            });

            connection.on("UserLeft", (user, message) => {
                if (participants.has(user)) {
                    participants.delete(user);
                    messages.push({ type: 'notification', message });
                    renderParticipants();
                    renderChat();
                }
            });

            if (video) { /* Logic video giữ nguyên */ }

            sendButton.addEventListener('click', () => {
                const message = messageInput.value.trim();
                if (message) {
                    connection.invoke("SendMessage", inviteCode, userName, message)
                        .catch(err => console.error("Lỗi gửi tin nhắn:", err));
                    messageInput.value = '';
                    messageInput.focus();
                }
            });

            messageInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    sendButton.click();
                }
            });

            copyInviteButton.addEventListener('click', () => {
                const codeToCopy = copyInviteButton.dataset.inviteCode;
                if (!codeToCopy) return;
                navigator.clipboard.writeText(codeToCopy);
                copyInviteButton.innerHTML = '<i class="fas fa-check"></i>';
                setTimeout(() => { copyInviteButton.innerHTML = '<i class="fas fa-copy"></i>'; }, 2000);
            });

            async function start() {
                try {
                    await connection.start();
                    await connection.invoke("JoinRoom", inviteCode, userName);
                } catch (err) {
                    console.error("Lỗi kết nối SignalR: ", err);
                    setTimeout(start, 5000);
                }
            }
            start();

            connection.onclose(() => {
                console.log("Mất kết nối SignalR, đang thử lại...");
                setTimeout(start, 5000);
            });
        })();
    </script> *@
</body>
</html>