@model MovieWebsite.Models.WatchPartyRoom
@{
    ViewData["Title"] = $"Xem chung: {Model.Movie?.Title ?? "Phòng Xem Chung"}";
    Layout = null; // Trang này không sử dụng layout chung

    // --- LOGIC XÁC ĐỊNH TẬP PHIM ---
    Episode currentEpisode = null;
    Episode previousEpisode = null;
    Episode nextEpisode = null;
    string videoUrl = null;
    int currentEpisodeNumber = 0;
    
    if (Model.Movie?.Episodes != null && Model.Movie.Episodes.Any())
    {
        var allEpisodes = Model.Movie.Episodes.OrderBy(e => e.EpisodeNumber).ToList();
        currentEpisode = allEpisodes.FirstOrDefault(e => e.Id == Model.CurrentEpisodeId) ?? allEpisodes.FirstOrDefault();

        if (currentEpisode != null)
        {
            previousEpisode = allEpisodes.LastOrDefault(e => e.EpisodeNumber < currentEpisode.EpisodeNumber);
            nextEpisode = allEpisodes.FirstOrDefault(e => e.EpisodeNumber > currentEpisode.EpisodeNumber);
            videoUrl = currentEpisode.VideoPath;
            currentEpisodeNumber = currentEpisode.EpisodeNumber;
        }
    }
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .gradient-bg { background: linear-gradient(135deg, #1e3c72 0%, #1c3257 100%); }
        .glass-effect { backdrop-filter: blur(16px); background: rgba(255, 255, 255, 0.1); border: 1px solid rgba(255, 255, 255, 0.2); }
        .cinema-icons { position: absolute; opacity: 0.1; font-size: 1.5rem; color: white; animation: float 4s ease-in-out infinite; z-index: 0; }
        @@keyframes float { 0%, 100% { transform: translateY(0px); } 50% { transform: translateY(-10px); } }
        .icon-1 { top: 10%; left: 5%; animation-delay: 0s; } .icon-2 { top: 20%; right: 8%; animation-delay: 1s; } .icon-3 { bottom: 15%; left: 10%; animation-delay: 2s; } .icon-4 { bottom: 25%; right: 12%; animation-delay: 0.5s; } .icon-5 { top: 60%; left: 3%; animation-delay: 1.5s; } .icon-6 { top: 45%; right: 5%; animation-delay: 2.5s; }
        .custom-scrollbar::-webkit-scrollbar { width: 6px; }
        .custom-scrollbar::-webkit-scrollbar-track { background: rgba(255, 255, 255, 0.1); }
        .custom-scrollbar::-webkit-scrollbar-thumb { background: rgba(251, 191, 36, 0.6); border-radius: 3px; }
        .custom-scrollbar::-webkit-scrollbar-thumb:hover { background: #fbbf24; }
        .pulse-dot { width: 10px; height: 10px; background-color: #34d399; border-radius: 50%; animation: pulse 2s infinite; }
        @@keyframes pulse { 0% { box-shadow: 0 0 0 0 rgba(52, 211, 153, 0.7); } 70% { box-shadow: 0 0 0 10px rgba(52, 211, 153, 0); } 100% { box-shadow: 0 0 0 0 rgba(52, 211, 153, 0); } }
        .chat-container { max-height: 500px; min-height: 300px; }
        #chat-messages { max-height: calc(100% - 200px); overflow-y: auto; }
        @@media (max-width: 1024px) { .chat-container { max-height: 400px; min-height: 250px; } }
        @@media (max-width: 768px) { .chat-container { max-height: 350px; min-height: 200px; } }
        /* Style để ẩn nội dung chính ban đầu cho khách */
        .main-content-area { visibility: hidden; } 
    </style>
</head>
<body class="gradient-bg text-white font-sans">

    <!-- ===== MODAL NHẬP TÊN CHO KHÁCH ===== -->
    <div id="name-prompt-modal" class="fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-50">
        <div class="glass-effect rounded-2xl shadow-2xl p-8 max-w-sm w-full transform transition-all duration-300 scale-95 opacity-0" id="name-prompt-card">
            <div class="text-center mb-6">
                <div class="relative inline-block">
                     <div class="w-24 h-24 mx-auto mb-4">
                        <div class="w-full h-full rounded-full bg-white/20 border border-white/30 flex items-center justify-center shadow-2xl">
                            <i class="fas fa-user-circle text-5xl text-white"></i>
                        </div>
                    </div>
                </div>
                <h2 class="text-2xl font-bold text-white mb-2">Tham gia phòng xem</h2>
                <p class="text-white/70">Nhập tên hiển thị của bạn để vào phòng nhé!</p>
            </div>
            <div class="space-y-4">
                <div class="relative">
                    <input type="text" id="name-input" placeholder="Nhập tên của bạn..." maxlength="20"
                           class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-yellow-300 focus:border-transparent transition-all duration-300" />
                    <div class="absolute inset-y-0 right-0 pr-3 flex items-center">
                        <i class="fas fa-keyboard text-white/40"></i>
                    </div>
                </div>
                <button id="join-with-name-btn"
                        class="w-full bg-gradient-to-r from-yellow-400 to-orange-500 hover:from-yellow-500 hover:to-orange-600 text-white font-bold py-3 px-6 rounded-xl shadow-lg transform transition-all duration-200 hover:scale-105 focus:outline-none focus:ring-2 focus:ring-yellow-300">
                    <i class="fas fa-rocket mr-2"></i>
                    Vào phòng
                </button>
            </div>
        </div>
    </div>

    <div class="cinema-icons icon-1"><i class="fas fa-film"></i></div>
    <div class="cinema-icons icon-2"><i class="fas fa-camera"></i></div>
    <div class="cinema-icons icon-3"><i class="fas fa-popcorn"></i></div>
    <div class="cinema-icons icon-4"><i class="fas fa-ticket-alt"></i></div>
    <div class="cinema-icons icon-5"><i class="fas fa-theater-masks"></i></div>
    <div class="cinema-icons icon-6"><i class="fas fa-video"></i></div>

    <!-- Container nội dung chính -->
    <div class="relative z-10 flex flex-col min-h-screen p-4 gap-4 main-content-area"> 
        <main class="flex-grow flex flex-col lg:flex-row gap-4 overflow-hidden"> 
            <div class="flex-grow flex flex-col gap-4 overflow-hidden"> 
                <div class="relative w-full aspect-video bg-black rounded-2xl overflow-hidden shadow-2xl">
                    @if (!string.IsNullOrEmpty(videoUrl))
                    {
                        <video id="movie-player" src="@videoUrl" controls class="w-full h-full object-contain absolute top-0 left-0"></video>
                    }
                    else
                    {
                        <div class="w-full h-full flex flex-col items-center justify-center text-center p-4">
                            <i class="fas fa-video-slash text-6xl text-red-400 mb-4"></i>
                            <h3 class="text-2xl font-bold mb-2">Không thể phát video</h3>
                            <p class="text-white/70">Rất tiếc, phim này hiện chưa có video hoặc đường dẫn video không hợp lệ.</p>
                        </div>
                    }
                </div>
                
                <div class="glass-effect rounded-2xl p-4 flex items-center justify-between flex-wrap gap-3">
                    <div class="flex-grow">
                        <h1 class="text-xl lg:text-2xl font-bold truncate">@Model.Movie?.Title - Tập @currentEpisodeNumber</h1>
                        <p class="text-sm text-white/70 truncate">Phòng: @Model.Name</p>
                    </div>
                    <div class="flex items-center gap-4">
                        @if (previousEpisode != null)
                        {
                            <button id="prev-episode-btn" data-episode-id="@previousEpisode.Id" title="Xem tập @previousEpisode.EpisodeNumber" class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded-xl transition-all flex items-center gap-2">
                                <i class="fas fa-arrow-left"></i>
                                <span class="hidden sm:inline">Tập trước</span>
                            </button>
                        }
                        else
                        {
                             <button title="Đây là tập đầu tiên" class="bg-gray-800 text-white/50 font-bold py-2 px-4 rounded-xl flex items-center gap-2 cursor-not-allowed opacity-50">
                                <i class="fas fa-arrow-left"></i>
                                <span class="hidden sm:inline">Tập trước</span>
                            </button>
                        }
                        @if (nextEpisode != null)
                        {
                            <button id="next-episode-btn" data-episode-id="@nextEpisode.Id" title="Xem tập @nextEpisode.EpisodeNumber" class="bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-xl transition-all flex items-center gap-2">
                                <span class="hidden sm:inline">Tập tiếp</span>
                                <i class="fas fa-arrow-right"></i>
                            </button>
                        }
                        else
                        {
                            <button title="Đây là tập cuối cùng" class="bg-gray-800 text-white/50 font-bold py-2 px-4 rounded-xl flex items-center gap-2 cursor-not-allowed opacity-50">
                                <span class="hidden sm:inline">Tập tiếp</span>
                                <i class="fas fa-arrow-right"></i>
                            </button>
                        }
                        <div class="flex items-center gap-2 text-green-400">
                            <div class="pulse-dot"></div>
                            <span>LIVE</span>
                        </div>
                        <div id="viewer-count" class="flex items-center gap-2 text-white/80">
                            <i class="fas fa-users"></i>
                            <span id="viewer-count-value">0</span>
                        </div>
                    </div>
                </div>
            </div>
            <aside class="w-full lg:max-w-sm xl:max-w-md flex-shrink-0 flex flex-col gap-4  h-full overflow-hidden"> 
                <div class="glass-effect rounded-2xl p-4 flex flex-col h-1/2 lg:h-1/3">
                    <div class="flex items-center justify-between mb-3">
                        <h3 class="font-bold text-lg flex items-center gap-2"><i class="fas fa-users text-blue-400"></i> Người tham gia</h3>
                        <span id="participant-count" class="bg-blue-500/50 text-white text-sm font-bold px-2 py-1 rounded-full">0</span>
                    </div>
                    <ul id="participants-list" class="flex-grow overflow-y-auto custom-scrollbar space-y-2 pr-2"></ul>
                </div>
                <div class="glass-effect rounded-2xl p-4 chat-container h-96 lg:h-[500px] flex flex-col">
                    <div class="flex items-center justify-between mb-3 flex-shrink-0">
                        <h3 class="font-bold text-lg flex items-center gap-2"><i class="fas fa-comments text-yellow-400"></i> Live Chat</h3>
                        <div id="sync-status" class="flex items-center gap-2 text-green-400 text-sm hidden"> 
                            <i class="fas fa-sync fa-spin"></i>
                            <span>Đồng bộ</span>
                        </div>
                    </div>
                    <div id="chat-messages" class="flex-1 overflow-y-auto custom-scrollbar pr-2 mb-3 space-y-3 min-h-0 max-h-full">
                        <p class="text-center text-xs text-white/50 italic">Bắt đầu trò chuyện!</p>
                    </div>
                    <div class="flex-shrink-0">
                        <div class="bg-white/5 border border-white/10 rounded-xl p-2 flex items-center justify-between mb-3">
                             <span class="text-sm text-white/70 ml-2">Mã mời:</span>
                             <span id="inviteCodeText" class="font-mono text-yellow-400 tracking-wider">@Model.InviteCode</span>
                             <button id="copy-invite-btn" title="Sao chép mã mời" class="bg-white/10 hover:bg-yellow-500/50 text-white p-1.5 px-3 rounded-lg transition-all">
                                 <i class="fas fa-copy"></i>
                             </button>
                        </div>
                        <div class="flex gap-2">
                             <input type="text" id="message-input" placeholder="Nhập bình luận..." class="flex-grow px-4 py-2 bg-white/10 border border-white/20 rounded-xl text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-yellow-400 transition-all shadow-inner">
                             <button id="send-button" class="bg-gradient-to-r from-yellow-400 to-orange-500 hover:from-yellow-500 hover:to-orange-600 text-white font-bold w-12 h-12 flex items-center justify-center rounded-xl shadow-lg transition-all transform hover:scale-105">
                                 <i class="fas fa-paper-plane"></i>
                             </button>
                        </div>
                    </div>
                </div>
            </aside>
        </main>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
    <script>
        (function () {
            const video = document.getElementById('movie-player');
            const prevEpisodeButton = document.getElementById('prev-episode-btn');
            const nextEpisodeButton = document.getElementById('next-episode-btn');
            const chatMessages = document.getElementById('chat-messages');
            const messageInput = document.getElementById('message-input');
            const sendButton = document.getElementById('send-button');
            const participantsList = document.getElementById('participants-list');
            const viewerCountSpan = document.getElementById('viewer-count-value');
            const participantCountBadge = document.getElementById('participant-count');
            const copyInviteBtn = document.getElementById('copy-invite-btn');
            const namePromptModal = document.getElementById('name-prompt-modal');
            const namePromptCard = document.getElementById('name-prompt-card');
            const nameInput = document.getElementById('name-input');
            const joinWithNameBtn = document.getElementById('join-with-name-btn');
            const mainContent = document.querySelector('.main-content-area');

            const inviteCode = "@Model.InviteCode";
            let userName = '@(ViewData["HostUserName"] as string ?? "")';
            let isSeeking = false;
            let isReceivingFromServer = false;

            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/watchPartyHub")
                .withAutomaticReconnect()
                .build();

            function addMessageToChat(user, message, type = 'message') {
                const messageElement = document.createElement('div');
                const timeString = new Date().toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' });
                if (type === 'message') {
                    const isCurrentUser = user === userName;
                    messageElement.className = `flex gap-2 ${isCurrentUser ? 'flex-row-reverse' : ''}`;
                    messageElement.innerHTML = `<img src="https://ui-avatars.com/api/?name=${encodeURIComponent(user)}&background=random&bold=true" alt="${user}" class="w-8 h-8 rounded-full flex-shrink-0 border-2 ${isCurrentUser ? 'border-yellow-400' : 'border-blue-400'}"><div class="flex flex-col ${isCurrentUser ? 'items-end' : 'items-start'} max-w-[70%]"><div class="px-3 py-2 rounded-lg ${isCurrentUser ? 'bg-yellow-500' : 'bg-white/20'} shadow"><p class="text-sm break-words">${message}</p></div><span class="text-xs text-white/50 mt-1">${user}, ${timeString}</span></div>`;
                } else {
                    messageElement.className = 'text-center text-xs text-purple-300/80 italic py-1 px-2 rounded-full bg-purple-900/30 max-w-fit mx-auto my-1';
                    messageElement.innerHTML = `<span>${message}</span>`;
                }
                chatMessages.appendChild(messageElement);
                setTimeout(() => chatMessages.scrollTo({ top: chatMessages.scrollHeight, behavior: 'smooth' }), 100);
            }

            function updateParticipantsList(userList) {
                participantsList.innerHTML = '';
                userList.sort((a, b) => (a === userName ? -1 : b === userName ? 1 : a.localeCompare(b)));
                userList.forEach(user => {
                    const isCurrentUser = user === userName;
                    const li = document.createElement('li');
                    li.className = `flex items-center gap-3 p-2 rounded-lg transition-colors duration-200 ${isCurrentUser ? 'bg-white/10' : 'hover:bg-white/5'}`;
                    li.innerHTML = `<div class="relative flex-shrink-0"><img src="https://ui-avatars.com/api/?name=${encodeURIComponent(user)}&background=random&bold=true&size=40" alt="${user}" class="w-10 h-10 rounded-full border-2 ${isCurrentUser ? 'border-yellow-400' : 'border-blue-400'}"><div class="absolute bottom-0 right-0 w-3 h-3 bg-green-400 border-2 border-gray-800 rounded-full"></div></div><span class="font-medium truncate">${user} ${isCurrentUser ? '(Bạn)' : ''}</span>`;
                    participantsList.appendChild(li);
                });
                const count = userList.length;
                if (viewerCountSpan) viewerCountSpan.textContent = count;
                if (participantCountBadge) participantCountBadge.textContent = count;
            }

            connection.on("ReceiveMessage", (user, message) => addMessageToChat(user, message, 'message'));
            connection.on("UpdateUserList", updateParticipantsList);
            connection.on("SystemMessage", (message) => addMessageToChat(null, message, 'notification'));
            connection.on("ReceiveVideoState", (state, serverCurrentTime) => {
                if (!video || isSeeking) return;
                isReceivingFromServer = true;
                video.currentTime = serverCurrentTime;
                if (state === "play" && video.paused) video.play().catch(e => console.error(e));
                else if (state === "pause" && !video.paused) video.pause();
                setTimeout(() => { isReceivingFromServer = false; }, 250);
            });
            connection.on("ReloadPage", () => {
                addMessageToChat(null, 'Chủ phòng đã chuyển tập. Đang tải lại...', 'notification');
                setTimeout(() => window.location.reload(), 2000);
            });

            function sendMessage() {
                const message = messageInput.value.trim();
                if (message) {
                    connection.invoke("SendMessage", inviteCode, userName, message).then(() => messageInput.value = '').catch(err => console.error(err));
                }
            }
            sendButton.addEventListener('click', sendMessage);
            messageInput.addEventListener('keypress', e => { if (e.key === 'Enter') sendMessage(); });
            copyInviteBtn.addEventListener('click', () => navigator.clipboard.writeText(inviteCode).then(() => {
                const originalIcon = copyInviteBtn.innerHTML;
                copyInviteBtn.innerHTML = '<i class="fas fa-check text-green-400"></i>';
                setTimeout(() => copyInviteBtn.innerHTML = originalIcon, 2000);
            }).catch(err => console.error(err)));

            if (video) {
                const sendState = (state, time) => {
                    if (!isReceivingFromServer && connection.state === signalR.HubConnectionState.Connected) {
                        connection.invoke("SyncVideoState", inviteCode, state, time).catch(err => console.error(err));
                    }
                };
                video.onplay = () => !isSeeking && sendState("play", video.currentTime);
                video.onpause = () => !isSeeking && sendState("pause", video.currentTime);
                video.onseeking = () => isSeeking = true;
                video.onseeked = () => {
                    sendState(video.paused ? "pause" : "play", video.currentTime);
                    setTimeout(() => isSeeking = false, 50);
                };
            }

            function changeEpisode(episodeId) {
                if (prevEpisodeButton) prevEpisodeButton.disabled = true;
                if (nextEpisodeButton) nextEpisodeButton.disabled = true;
                if (episodeId) {
                    connection.invoke("ChangeEpisode", inviteCode, episodeId).catch(err => {
                        console.error(err);
                        if (prevEpisodeButton) prevEpisodeButton.disabled = false;
                        if (nextEpisodeButton) nextEpisodeButton.disabled = false;
                    });
                }
            }
            if (prevEpisodeButton) prevEpisodeButton.addEventListener('click', () => changeEpisode(parseInt(prevEpisodeButton.dataset.episodeId)));
            if (nextEpisodeButton) nextEpisodeButton.addEventListener('click', () => changeEpisode(parseInt(nextEpisodeButton.dataset.episodeId)));

            async function startConnectionAndJoinRoom() {
                try {
                    await connection.start();
                    await connection.invoke("JoinRoom", inviteCode, userName);
                } catch (err) {
                    addMessageToChat(null, 'Không thể kết nối đến máy chủ. Vui lòng tải lại trang.', 'notification');
                }
            }
            
            function handleJoinWithName() {
                const enteredName = nameInput.value.trim();
                if (enteredName) {
                    userName = enteredName;
                    namePromptCard.style.transform = 'scale(0.95)';
                    namePromptCard.style.opacity = '0';
                    setTimeout(() => {
                        namePromptModal.style.display = 'none';
                        mainContent.style.visibility = 'visible';
                    }, 300);
                    startConnectionAndJoinRoom();
                } else {
                    nameInput.placeholder = "Vui lòng nhập tên của bạn!";
                    nameInput.classList.add('border-red-500', 'focus:ring-red-500');
                }
            }
            
            document.addEventListener('DOMContentLoaded', () => {
                if (userName) {
                    namePromptModal.style.display = 'none';
                    mainContent.style.visibility = 'visible';
                    startConnectionAndJoinRoom();
                } else {
                    namePromptModal.style.display = 'flex';
                    setTimeout(() => {
                        namePromptCard.style.transform = 'scale(1)';
                        namePromptCard.style.opacity = '1';
                        nameInput.focus();
                    }, 100);
                }
            });

            joinWithNameBtn.addEventListener('click', handleJoinWithName);
            nameInput.addEventListener('keypress', e => { if (e.key === 'Enter') handleJoinWithName(); });
            window.addEventListener('beforeunload', () => { if (connection.state === signalR.HubConnectionState.Connected) connection.stop(); });
        })();
    </script>
</body>
</html>