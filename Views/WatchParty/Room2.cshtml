@* @model MovieWebsite.Models.WatchPartyRoom
@{
    ViewData["Title"] = "Xem chung: " + Model.Movie.Title;
    ViewBag.CurrentMovieId = Model.MovieId;
    var firstEpisode = Model.Movie.Episodes?.OrderBy(e => e.EpisodeNumber).FirstOrDefault();
    var videoUrl = firstEpisode?.VideoPath;
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <!-- TailwindCSS CDN -->
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body class="bg-gray-900 text-white">
    <div class="container mx-auto px-4 py-6 max-w-7xl">
        <!-- Header -->
        <div class="mb-6">
            <h1 class="text-2xl md:text-3xl font-bold">@ViewData["Title"]</h1>
            <p class="text-green-400 mt-2">
                Mã mời: <span class="font-semibold">@Model.InviteCode</span> 
                <button id="copy-invite" class="ml-2 text-sm bg-green-600 hover:bg-green-700 text-white px-2 py-1 rounded transition duration-200">
                    <i class="fas fa-copy"></i> Sao chép
                </button>
            </p>
        </div>

        <!-- Main Layout -->
        <div class="flex flex-col lg:flex-row gap-6">
            <!-- Video Player (2/3 width) -->
            <div class="lg:w-2/3">
                @if (!string.IsNullOrEmpty(videoUrl))
                {
                    <div class="relative">
                        <video id="movie-player" src="@videoUrl" controls class="w-full bg-black rounded-lg shadow-lg" style="aspect-ratio: 16/9;"></video>
                        <!-- Video Status Overlay -->
                        <div id="video-status" class="absolute top-4 left-4 bg-black bg-opacity-70 text-white px-3 py-1 rounded text-sm">
                            <span id="viewer-count">0 người đang xem</span> | <span id="current-time">0:00</span>
                        </div>
                    </div>
                }
                else
                {
                    <div class="bg-yellow-600 text-black p-4 rounded-lg">
                        Rất tiếc, phim này hiện chưa có video để phát.
                    </div>
                }
            </div>

            <!-- Sidebar (1/3 width) -->
            <div class="lg:w-1/3 flex flex-col gap-6">
                <!-- Participants List -->
                <div class="bg-gray-800 p-4 rounded-lg shadow-lg">
                    <h2 class="text-lg font-semibold mb-3"><i class="fas fa-users mr-2"></i>Người tham gia</h2>
                    <ul id="participants-list" class="space-y-3 max-h-48 overflow-y-auto">
                        <!-- Dynamic list populated by JS -->
                    </ul>
                </div>

                <!-- Live Chat -->
                <div class="bg-gray-800 p-4 rounded-lg shadow-lg flex-1 flex flex-col">
                    <h2 class="text-lg font-semibold mb-3"><i class="fas fa-comments mr-2"></i>Live Chat</h2>
                    <div id="chat-box" class="flex-1 bg-gray-700 p-3 rounded mb-3 overflow-y-auto" style="max-height: 400px;">
                        <!-- Dynamic chat messages -->
                    </div>
                    <div class="flex gap-2">
                        <input type="text" id="message-input" class="flex-1 bg-gray-600 text-white p-2 rounded focus:outline-none focus:ring-2 focus:ring-green-500" placeholder="Nhập bình luận...">
                        <button id="send-button" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded transition duration-200">
                            Gửi
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- SignalR and JavaScript -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
    <script>
        (function () {
            // --- Khai báo biến ---
            const chatBox = document.getElementById('chat-box');
            const video = document.getElementById('movie-player');
            const messageInput = document.getElementById('message-input');
            const sendButton = document.getElementById('send-button');
            const participantsList = document.getElementById('participants-list');
            const viewerCount = document.getElementById('viewer-count');
            const currentTime = document.getElementById('current-time');
            const copyInvite = document.getElementById('copy-invite');
            const inviteCode = "@Model.InviteCode";
            const userName = "User" + Math.floor(Math.random() * 1000);
            let messages = [];
            let participants = new Set();

            // Kiểm tra elements
            if (!chatBox || !messageInput || !sendButton || !participantsList) {
                console.error("Không tìm thấy các thành phần UI.");
                return;
            }

            // --- Hàm xử lý ---
            function formatTime(seconds) {
                const min = Math.floor(seconds / 60);
                const sec = Math.floor(seconds % 60);
                return `${min}:${sec < 10 ? '0' : ''}${sec}`;
            }

            function renderChat() {
                chatBox.innerHTML = messages.map(msg => `
                    <div class="mb-2 ${msg.type === 'notification' ? 'text-gray-400 italic' : ''}">
                        ${msg.type === 'message' ? `<strong class="text-green-400">${msg.user}:</strong> ${msg.message}` : msg.message}
                    </div>
                `).join('');
                chatBox.scrollTop = chatBox.scrollHeight;
            }

            function renderParticipants() {
                participantsList.innerHTML = Array.from(participants).map(user => `
                    <li class="flex items-center gap-2">
                        <img src="https://via.placeholder.com/32" alt="avatar" class="w-8 h-8 rounded-full">
                        <span class="text-sm">${user}</span>
                    </li>
                `).join('');
                viewerCount.textContent = `${participants.size} người đang xem`;
            }

            function updateVideoTime() {
                if (video) {
                    currentTime.textContent = formatTime(video.currentTime);
                }
            }

            // --- SignalR ---
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/watchPartyHub")
                .configureLogging(signalR.LogLevel.Information)
                .build();

            connection.on("ReceiveMessage", (user, message) => {
                messages.push({ type: 'message', user, message });
                renderChat();
            });

            connection.on("UserJoined", (user, message) => {
                participants.add(user);
                messages.push({ type: 'notification', message });
                renderParticipants();
                renderChat();
            });

            connection.on("UserLeft", (user, message) => {
                participants.delete(user);
                messages.push({ type: 'notification', message });
                renderParticipants();
                renderChat();
            });

            if (video) {
                let isSyncing = false;
                connection.on("ReceiveVideoState", (state, currentTime) => {
                    isSyncing = true;
                    video.currentTime = currentTime;
                    if (state === "play" && video.paused) video.play();
                    else if (state === "pause" && !video.paused) video.pause();
                    setTimeout(() => { isSyncing = false; }, 200);
                });

                const sendState = () => {
                    if (isSyncing) return;
                    connection.invoke("SyncVideoState", inviteCode, video.paused ? "pause" : "play", video.currentTime);
                };

                video.onplay = sendState;
                video.onpause = sendState;
                video.onseeked = sendState;
                video.ontimeupdate = updateVideoTime;
            }

            // --- Sự kiện ---
            sendButton.addEventListener('click', () => {
                const message = messageInput.value.trim();
                if (message) {
                    connection.invoke("SendMessage", inviteCode, userName, message)
                        .catch(err => console.error("Lỗi gửi tin nhắn:", err));
                    messageInput.value = '';
                }
            });

            messageInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') sendButton.click();
            });

            copyInvite.addEventListener('click', () => {
                navigator.clipboard.writeText(inviteCode);
                copyInvite.innerHTML = '<i class="fas fa-check"></i> Đã sao chép';
                setTimeout(() => {
                    copyInvite.innerHTML = '<i class="fas fa-copy"></i> Sao chép';
                }, 2000);
            });

            // --- Khởi động ---
            async function start() {
                try {
                    await connection.start();
                    await connection.invoke("JoinRoom", inviteCode, userName);
                    participants.add(userName);
                    renderParticipants();
                } catch (err) {
                    console.error("Lỗi kết nối SignalR, thử lại sau 5s:", err);
                    setTimeout(start, 5000);
                }
            }
            start();

            // Xử lý ngắt kết nối
            connection.onclose(() => {
                console.log("Kết nối SignalR bị đóng, thử kết nối lại...");
                start();
            });
        })();
    </script>
</body>
</html> *@

@* @model MovieWebsite.Models.WatchPartyRoom
@{
    ViewData["Title"] = "Xem chung: " + Model.Movie.Title;
    ViewBag.CurrentMovieId = Model.MovieId;
    var firstEpisode = Model.Movie.Episodes?.OrderBy(e => e.EpisodeNumber).FirstOrDefault();
    var videoUrl = firstEpisode?.VideoPath;
    var duration = Model.Movie.Episodes?.Sum(e => e.Duration) ?? 90;
    var rating = Model.Movie.AverageRating.ToString("0.0");
    var genreName = Model.Movie.Genre?.Name ?? "Đang cập nhật";
    var countryName = Model.Movie.Country?.Name ?? "Đang cập nhật";
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <!-- TailwindCSS CDN -->
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">
    <style>
        /* --- TÔNG MÀU MỚI VÀ HIỆU ỨNG --- */
        :root {
            --bg-primary: #111827; /* bg-slate-900 */
            --bg-secondary: #1F2937; /* bg-slate-800 */
            --border-color: #374151; /* border-slate-700 */
            --accent-color: #6366F1; /* indigo-500 */
            --text-primary: #D1D5DB; /* text-slate-300 */
            --text-secondary: #9CA3AF; /* text-slate-400 */
        }

        body {
            background-color: var(--bg-primary);
            color: var(--text-primary);
        }

        /* --- Scrollbar tùy chỉnh cho bảng điều khiển --- */
        .custom-scroll::-webkit-scrollbar { width: 8px; }
        .custom-scroll::-webkit-scrollbar-track { background: transparent; }
        .custom-scroll::-webkit-scrollbar-thumb {
            background-color: var(--border-color);
            border-radius: 20px;
            border: 3px solid transparent;
            background-clip: content-box;
        }
        .custom-scroll::-webkit-scrollbar-thumb:hover { background-color: var(--accent-color); }
        .custom-scroll { scrollbar-color: var(--border-color) transparent; scrollbar-width: thin; }

        /* --- Hiệu ứng tin nhắn mới --- */
        @@keyframes slideInUp {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .chat-message-new { animation: slideInUp 0.4s ease-out; }

        /* --- Hiệu ứng chuyển tab --- */
        @@keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        .tab-content { animation: fadeIn 0.3s ease-in-out; }

        /* Đảm bảo video có tỷ lệ 16:9 */
        .video-aspect-ratio {
            position: relative;
            width: 100%;
            padding-top: 56.25%; /* 16:9 */
        }
        .video-aspect-ratio video {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
    </style>
</head>
<body class="min-h-screen flex flex-col antialiased">

    <!-- HEADER: Tối giản, tập trung vào thông tin cần thiết -->
    <header class="w-full px-6 py-3 bg-slate-900/80 backdrop-blur-sm border-b border-slate-700 z-10">
        <div class="max-w-screen-2xl mx-auto flex justify-between items-center">
            <div class="flex items-center gap-4">
                <h1 class="text-xl md:text-2xl font-bold text-white truncate">@Model.Movie.Title</h1>
                <span class="bg-indigo-500 text-white text-xs font-bold px-3 py-1 rounded-full">PARTY</span>
            </div>
            <div class="flex items-center gap-3">
                 <div class="hidden md:flex items-center gap-2 text-sm bg-slate-800 px-3 py-1.5 rounded-full">
                     <i class="fas fa-users text-indigo-400"></i>
                     <span id="viewer-count" class="font-medium">0</span>
                     <span class="text-slate-500">|</span>
                     <i class="fas fa-clock text-indigo-400"></i>
                     <span id="current-time" class="font-medium">0:00</span>
                 </div>
                <button id="copy-invite" class="bg-slate-700 hover:bg-slate-600 text-white px-4 py-2 rounded-full text-sm transition-colors duration-200 flex items-center gap-2">
                    <i class="fas fa-share-alt"></i>
                    <span class="hidden md:inline">Mời bạn bè</span>
                </button>
            </div>
        </div>
    </header>

    <!-- MAIN CONTENT: Layout chính với Player và Bảng điều khiển -->
    <main class="flex-1 flex flex-col lg:flex-row gap-4 p-4 lg:p-6 max-w-screen-2xl mx-auto w-full overflow-hidden">
        
        <!-- Player Section -->
        <div class="flex-1 flex flex-col min-w-0">
             @if (!string.IsNullOrEmpty(videoUrl))
            {
                <div class="video-aspect-ratio bg-black rounded-xl shadow-2xl shadow-black/50">
                    <video id="movie-player" src="@videoUrl" controls class="rounded-xl"></video>
                </div>
            }
            else
            {
                 <div class="w-full h-full bg-slate-800 rounded-xl flex flex-col justify-center items-center text-center p-8">
                     <i class="fas fa-video-slash text-6xl text-slate-500 mb-4"></i>
                     <h3 class="text-2xl font-bold text-white">Video không khả dụng</h3>
                     <p class="text-slate-400 mt-2">Rất tiếc, không tìm thấy video cho phim này.</p>
                 </div>
            }
        </div>

        <!-- Interaction Panel (Sidebar) -->
        <aside class="w-full lg:w-96 lg:max-w-sm flex flex-col bg-slate-800/50 backdrop-blur-sm rounded-xl border border-slate-700 overflow-hidden">
            
            <!-- Horizontal Participants List -->
            <div class="p-4 border-b border-slate-700">
                <h3 class="text-sm font-semibold text-slate-400 mb-3">ĐANG XEM CÙNG (<span id="participant-count">0</span>)</h3>
                <div id="participants-list" class="flex items-center gap-3 overflow-x-auto pb-2 custom-scroll -mb-2">
                    <!-- JS sẽ render avatar vào đây -->
                    <!-- Ví dụ: -->
                    <!-- <div class="text-center flex-shrink-0">
                        <img src="https://ui-avatars.com/api/?name=You" class="w-14 h-14 rounded-full border-2 border-indigo-500">
                        <p class="text-xs mt-1 truncate w-14">Bạn</p>
                    </div> -->
                </div>
            </div>

            <!-- Tab Controls -->
            <div class="flex border-b border-slate-700">
                <button data-tab="chat" class="tab-btn flex-1 py-3 text-sm font-semibold border-b-2 border-indigo-500 text-white transition-colors duration-200">
                    <i class="fas fa-comments mr-2"></i> Chat
                </button>
                <button data-tab="info" class="tab-btn flex-1 py-3 text-sm font-semibold border-b-2 border-transparent text-slate-400 hover:text-white transition-colors duration-200">
                    <i class="fas fa-info-circle mr-2"></i> Thông tin
                </button>
            </div>
            
            <!-- Tab Content -->
            <div class="flex-1 flex flex-col overflow-hidden">
                <!-- Chat Panel -->
                <div id="chat-panel" class="tab-content flex-1 flex flex-col overflow-hidden">
                    <div id="chat-box" class="flex-1 p-4 space-y-4 overflow-y-auto custom-scroll">
                        <!-- JS sẽ render tin nhắn vào đây -->
                        <div class="text-center text-slate-500 py-8">
                            <i class="far fa-comments text-4xl"></i>
                            <p class="mt-2 text-sm">Chào mừng tới phòng xem chung!</p>
                        </div>
                    </div>
                    <!-- Chat Input -->
                    <div class="p-4 border-t border-slate-700 bg-slate-800">
                        <div class="relative">
                             <input type="text" id="message-input" class="w-full bg-slate-700 text-white pl-4 pr-12 py-3 rounded-full focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-shadow duration-200" placeholder="Gửi một tin nhắn...">
                            <button id="send-button" class="absolute right-2 top-1/2 -translate-y-1/2 bg-indigo-600 hover:bg-indigo-500 text-white w-9 h-9 rounded-full transition-colors duration-200 flex items-center justify-center">
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Info Panel -->
                <div id="info-panel" class="tab-content hidden flex-1 p-6 overflow-y-auto custom-scroll space-y-4">
                     <h3 class="text-xl font-bold text-white">@Model.Movie.Title</h3>
                     <p class="text-sm text-slate-300">@Model.Movie.Description</p>
                     <div class="border-t border-slate-700 pt-4 space-y-3 text-sm">
                        <div class="flex justify-between">
                            <span class="text-slate-400">Đánh giá</span>
                            <span class="font-semibold text-white flex items-center gap-1"><i class="fas fa-star text-yellow-400"></i> @rating/10</span>
                        </div>
                         <div class="flex justify-between">
                            <span class="text-slate-400">Năm</span>
                            <span class="font-semibold text-white">@Model.Movie.ReleaseYear</span>
                        </div>
                         <div class="flex justify-between">
                            <span class="text-slate-400">Thể loại</span>
                            <span class="font-semibold text-white">@genreName</span>
                        </div>
                         <div class="flex justify-between">
                            <span class="text-slate-400">Quốc gia</span>
                            <span class="font-semibold text-white">@countryName</span>
                        </div>
                         <div class="flex justify-between">
                            <span class="text-slate-400">Thời lượng</span>
                            <span class="font-semibold text-white">@duration phút</span>
                        </div>
                     </div>
                </div>
            </div>
        </aside>
    </main>

    <!-- SignalR and JavaScript -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
    <script>
        // --- GIỮ NGUYÊN HOÀN TOÀN SCRIPT CŨ CỦA BẠN ---
        // --- THÊM PHẦN LOGIC MỚI CHO TAB ---
        
        // Bọc toàn bộ script trong một hàm IIFE để tránh xung đột
        (function () {
            
            // --- LOGIC MỚI CHO TAB UI ---
            const tabButtons = document.querySelectorAll('.tab-btn');
            const tabContents = document.querySelectorAll('.tab-content');

            tabButtons.forEach(button => {
                button.addEventListener('click', () => {
                    // Xóa trạng thái active của tất cả button
                    tabButtons.forEach(btn => {
                        btn.classList.remove('text-white', 'border-indigo-500');
                        btn.classList.add('text-slate-400', 'border-transparent');
                    });
                    
                    // Thêm trạng thái active cho button được click
                    button.classList.add('text-white', 'border-indigo-500');
                    button.classList.remove('text-slate-400', 'border-transparent');
                    
                    const targetTab = button.dataset.tab;
                    
                    // Ẩn tất cả nội dung tab
                    tabContents.forEach(content => {
                        content.classList.add('hidden');
                    });
                    
                    // Hiển thị nội dung tab tương ứng
                    document.getElementById(`${targetTab}-panel`).classList.remove('hidden');
                });
            });

            // --- SCRIPT GỐC CỦA BẠN (với một vài chỉnh sửa nhỏ để phù hợp layout mới) ---
            const chatBox = document.getElementById('chat-box');
            const video = document.getElementById('movie-player');
            const messageInput = document.getElementById('message-input');
            const sendButton = document.getElementById('send-button');
            const participantsList = document.getElementById('participants-list');
            const viewerCount = document.getElementById('viewer-count'); // Header
            const participantCount = document.getElementById('participant-count'); // Sidebar
            const currentTime = document.getElementById('current-time'); // Header
            const copyInvite = document.getElementById('copy-invite');
            const inviteCode = "@Model.InviteCode";
            const userName = "User" + Math.floor(Math.random() * 1000);
            let messages = [];
            let participants = new Set();

            if (!chatBox || !messageInput || !sendButton || !participantsList) {
                console.error("Không tìm thấy các thành phần UI.");
                return;
            }

            function formatTime(seconds) {
                const min = Math.floor(seconds / 60);
                const sec = Math.floor(seconds % 60);
                return `${min}:${sec < 10 ? '0' : ''}${sec}`;
            }

            function renderChat() {
                 if (messages.length === 0) {
                     chatBox.innerHTML = `
                        <div class="text-center text-slate-500 py-8">
                            <i class="far fa-comments text-4xl"></i>
                            <p class="mt-2 text-sm">Chào mừng tới phòng xem chung!</p>
                        </div>
                    `;
                    return;
                }
                
                chatBox.innerHTML = messages.map(msg => {
                    // Thêm class 'chat-message-new' để có hiệu ứng
                    const messageClass = `chat-message-new ${msg.type === 'notification' ? 'text-center text-slate-400 italic text-sm' : ''}`;
                    
                    return `
                        <div class="${messageClass}">
                            ${msg.type === 'message' ? `
                                <div class="flex gap-3">
                                    <div class="flex-shrink-0">
                                        <img src="https://ui-avatars.com/api/?name=${encodeURIComponent(msg.user)}&background=4F46E5&color=fff&font-size=0.5" 
                                             alt="${msg.user}" class="w-9 h-9 rounded-full">
                                    </div>
                                    <div class="flex-1">
                                        <div class="flex items-baseline gap-2">
                                            <span class="font-semibold text-indigo-400">${msg.user}</span>
                                            <span class="text-xs text-slate-500">${new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</span>
                                        </div>
                                        <p class="text-slate-200 leading-tight">${msg.message}</p>
                                    </div>
                                </div>
                            ` : `
                                <div class="py-1">${msg.message}</div>
                            `}
                        </div>
                    `;
                }).join('');
                chatBox.scrollTop = chatBox.scrollHeight;
            }

            function renderParticipants() {
                participantsList.innerHTML = Array.from(participants).map(user => `
                    <div class="text-center flex-shrink-0 transition-transform duration-200 hover:-translate-y-1">
                        <img src="https://ui-avatars.com/api/?name=${encodeURIComponent(user)}&background=random&color=fff&size=64" 
                             alt="${user}" class="w-14 h-14 rounded-full object-cover border-2 ${user === userName ? 'border-indigo-500' : 'border-slate-600'} hover:border-indigo-400 transition-colors duration-200">
                        <p class="text-xs text-slate-300 mt-1.5 truncate w-14">${user === userName ? 'Bạn' : user}</p>
                    </div>
                `).join('');
                viewerCount.textContent = participants.size;
                participantCount.textContent = participants.size;
            }

            function updateVideoTime() {
                if (video) {
                    const current = formatTime(video.currentTime);
                    currentTime.textContent = current;
                }
            }
            
            // --- PHẦN SIGNALR GIỮ NGUYÊN NHƯ CŨ ---
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/watchPartyHub")
                .configureLogging(signalR.LogLevel.Information)
                .build();

            connection.on("ReceiveMessage", (user, message) => {
                messages.push({ type: 'message', user, message });
                renderChat();
            });
            // ... (các hàm connection.on khác của bạn) ...
             connection.on("UserJoined", (user, message) => {
                participants.add(user);
                messages.push({ type: 'notification', message: `${user} đã tham gia` });
                renderParticipants();
                renderChat();
            });

            connection.on("UserLeft", (user, message) => {
                participants.delete(user);
                messages.push({ type: 'notification', message: `${user} đã rời đi` });
                renderParticipants();
                renderChat();
            });
             if (video) {
                let isSyncing = false;
                connection.on("ReceiveVideoState", (state, currentTimeVal, syncUser) => {
                    isSyncing = true;
                    // Bỏ thông báo sync để đỡ rối UI
                    video.currentTime = currentTimeVal;
                    if (state === "play" && video.paused) video.play();
                    else if (state === "pause" && !video.paused) video.pause();
                    setTimeout(() => { isSyncing = false; }, 200);
                });

                const sendState = () => {
                    if (isSyncing) return;
                    connection.invoke("SyncVideoState", inviteCode, video.paused ? "pause" : "play", video.currentTime, userName)
                        .catch(err => console.error("Lỗi đồng bộ video:", err));
                };

                video.onplay = sendState;
                video.onpause = sendState;
                video.onseeked = sendState;
                video.ontimeupdate = updateVideoTime;
                
                video.onloadedmetadata = updateVideoTime;
            }

            // --- PHẦN SỰ KIỆN GIỮ NGUYÊN NHƯ CŨ ---
             sendButton.addEventListener('click', () => {
                const message = messageInput.value.trim();
                if (message) {
                    connection.invoke("SendMessage", inviteCode, userName, message)
                        .catch(err => console.error("Lỗi gửi tin nhắn:", err));
                    messageInput.value = '';
                }
            });

            messageInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    sendButton.click();
                }
            });

             copyInvite.addEventListener('click', () => {
                navigator.clipboard.writeText(inviteCode);
                const originalText = copyInvite.innerHTML;
                copyInvite.innerHTML = '<i class="fas fa-check mr-2"></i> Đã sao chép';
                copyInvite.classList.remove('bg-slate-700', 'hover:bg-slate-600');
                copyInvite.classList.add('bg-indigo-600');
                setTimeout(() => {
                    copyInvite.innerHTML = originalText;
                    copyInvite.classList.add('bg-slate-700', 'hover:bg-slate-600');
                    copyInvite.classList.remove('bg-indigo-600');
                }, 2000);
            });

            // --- PHẦN KHỞI ĐỘNG GIỮ NGUYÊN NHƯ CŨ ---
             async function start() {
                try {
                    await connection.start();
                    await connection.invoke("JoinRoom", inviteCode, userName);
                    participants.add(userName);
                    renderParticipants();
                    
                    messages.push({ 
                        type: 'notification', 
                        message: `Mời bạn bè bằng mã: <span class="font-semibold text-indigo-400">${inviteCode}</span>` 
                    });
                    renderChat();
                } catch (err) {
                    console.error("Lỗi kết nối SignalR, thử lại sau 5s:", err);
                    setTimeout(start, 5000);
                }
            }
            start();

            // ... (phần còn lại của script) ...
             connection.onclose(() => {
                console.log("Kết nối SignalR bị đóng, thử kết nối lại...");
                // Thêm thông báo UI nếu muốn
                start();
            });

        })();
    </script>
</body>
</html> *@


@model MovieWebsite.Models.WatchPartyRoom
@{
    ViewData["Title"] = $"Xem chung: {Model.Movie?.Title ?? "Phòng Xem Chung"}";

    // Lấy thông tin cần thiết từ Model, với kiểm tra null để đảm bảo an toàn
    var firstEpisode = Model.Movie?.Episodes?.OrderBy(e => e.EpisodeNumber).FirstOrDefault();
    var videoUrl = firstEpisode?.VideoPath;
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        /* --- Kế thừa các style từ trang Create để thống nhất --- */
        .gradient-bg {
            background: linear-gradient(135deg, #1e3c72 0%, #1c3257 100%);
        }
        .glass-effect {
            backdrop-filter: blur(16px);
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        .cinema-icons {
            position: absolute;
            opacity: 0.1;
            font-size: 1.5rem;
            color: white;
            animation: float 4s ease-in-out infinite;
            z-index: 0;
        }
        @@keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-10px); }
        }
        .icon-1 { top: 10%; left: 5%; animation-delay: 0s; } .icon-2 { top: 20%; right: 8%; animation-delay: 1s; } .icon-3 { bottom: 15%; left: 10%; animation-delay: 2s; } .icon-4 { bottom: 25%; right: 12%; animation-delay: 0.5s; } .icon-5 { top: 60%; left: 3%; animation-delay: 1.5s; } .icon-6 { top: 45%; right: 5%; animation-delay: 2.5s; }
        
        /* --- Tùy chỉnh cho trang xem phim --- */
        /* Custom scrollbar cho khung chat và danh sách người tham gia */
        .custom-scrollbar::-webkit-scrollbar { width: 6px; }
        .custom-scrollbar::-webkit-scrollbar-track { background: rgba(255, 255, 255, 0.1); }
        .custom-scrollbar::-webkit-scrollbar-thumb { background: rgba(251, 191, 36, 0.6); border-radius: 3px; }
        .custom-scrollbar::-webkit-scrollbar-thumb:hover { background: #fbbf24; }

        .pulse-dot {
            width: 10px;
            height: 10px;
            background-color: #34d399; /* green-400 */
            border-radius: 50%;
            animation: pulse 2s infinite;
        }
        @@keyframes pulse {
            0% { box-shadow: 0 0 0 0 rgba(52, 211, 153, 0.7); }
            70% { box-shadow: 0 0 0 10px rgba(52, 211, 153, 0); }
            100% { box-shadow: 0 0 0 0 rgba(52, 211, 153, 0); }
        }
    </style>
</head>
<body class="gradient-bg text-white font-sans">
    <!-- Icon nền kế thừa từ trang Create -->
    <div class="cinema-icons icon-1"><i class="fas fa-film"></i></div>
    <div class="cinema-icons icon-2"><i class="fas fa-camera"></i></div>
    <div class="cinema-icons icon-3"><i class="fas fa-popcorn"></i></div>
    <div class="cinema-icons icon-4"><i class="fas fa-ticket-alt"></i></div>
    <div class="cinema-icons icon-5"><i class="fas fa-theater-masks"></i></div>
    <div class="cinema-icons icon-6"><i class="fas fa-video"></i></div>

    <!-- Container chính, cho phép cuộn nếu nội dung quá dài, nhưng ưu tiên không cuộn bằng h-screen -->
    <div class="relative z-10 flex flex-col min-h-screen p-4 gap-4"> 
        <!-- Khu vực chính: Video và Social Panel -->
        <!-- Sử dụng flexbox để chia layout: cột trên mobile, hàng trên desktop (lg+) -->
        <main class="flex-grow flex flex-col lg:flex-row gap-4 overflow-hidden"> 

            <!-- Cột trái: Video và thông tin -->
            <!-- flex-grow cho phép cột này chiếm phần lớn không gian còn lại -->
            <div class="flex-grow flex flex-col gap-4 overflow-hidden"> 
                <!-- Video Player -->
                <!-- w-full và h-full để chiếm toàn bộ không gian được cấp phát -->
                <div class="relative w-full aspect-video bg-black rounded-2xl overflow-hidden shadow-2xl">
                    @if (!string.IsNullOrEmpty(videoUrl))
                    {
                        <!-- Dùng aspect-video để đảm bảo tỷ lệ khung hình video -->
                        <video id="movie-player" src="@videoUrl" controls class="w-full h-full object-contain absolute top-0 left-0"></video>
                    }
                    else
                    {
                        <div class="w-full h-full flex flex-col items-center justify-center text-center p-4">
                            <i class="fas fa-video-slash text-6xl text-red-400 mb-4"></i>
                            <h3 class="text-2xl font-bold mb-2">Không thể phát video</h3>
                            <p class="text-white/70">Rất tiếc, phim này hiện chưa có video hoặc đường dẫn video không hợp lệ.</p>
                        </div>
                    }
                </div>
                
                <!-- Thanh thông tin dưới video -->
                <div class="glass-effect rounded-2xl p-4 flex items-center justify-between flex-wrap gap-3">
                    <div class="flex-grow">
                        <h1 class="text-xl lg:text-2xl font-bold truncate">@Model.Movie?.Title</h1>
                        <p class="text-sm text-white/70 truncate">Phòng: @Model.Name</p>
                    </div>
                    <div class="flex items-center gap-4 flex-shrink-0">
                         <!-- Trạng thái LIVE -->
                         <div class="flex items-center gap-2 text-green-400">
                             <div class="pulse-dot"></div>
                             <span>LIVE</span>
                         </div>
                         <!-- Số người xem -->
                         <!-- Sử dụng ID riêng cho số lượng người xem -->
                        <div id="viewer-count" class="flex items-center gap-2 text-white/80">
                            <i class="fas fa-users"></i>
                            <span id="viewer-count-value">0</span> 
                        </div>
                    </div>
                </div>
            </div>

            <!-- Cột phải: Social (Chat & Participants) -->
            <!-- w-full trên mobile, giới hạn max-w-sm (384px) trên desktop -->
            <aside class="w-full lg:max-w-sm xl:max-w-md flex-shrink-0 flex flex-col gap-4 h-full"> 
                
                <!-- Khung người tham gia -->
                <div class="glass-effect rounded-2xl p-4 flex flex-col h-1/2 lg:h-1/3">
                    <div class="flex items-center justify-between mb-3">
                        <h3 class="font-bold text-lg flex items-center gap-2"><i class="fas fa-users text-blue-400"></i> Người tham gia</h3>
                        <!-- Số lượng người tham gia, cập nhật từ SignalR -->
                        <span id="participant-count" class="bg-blue-500/50 text-white text-sm font-bold px-2 py-1 rounded-full">0</span>
                    </div>
                    <!-- Danh sách người dùng, có thanh cuộn tùy chỉnh -->
                    <ul id="participants-list" class="flex-grow overflow-y-auto custom-scrollbar space-y-2 pr-2">
                        <!-- JS sẽ điền danh sách người tham gia vào đây -->
                        <li class="flex items-center gap-3 p-2 rounded-lg">
                             <div class="relative animate-pulse">
                                 <div class="w-10 h-10 rounded-full bg-gray-600"></div>
                                 <div class="absolute bottom-0 right-0 w-3 h-3 bg-green-400 border-2 border-gray-800 rounded-full"></div>
                             </div>
                             <span class="font-medium bg-gray-700 h-4 rounded w-24"></span>
                        </li>
                         <li class="flex items-center gap-3 p-2 rounded-lg">
                             <div class="relative animate-pulse">
                                 <div class="w-10 h-10 rounded-full bg-gray-600"></div>
                                 <div class="absolute bottom-0 right-0 w-3 h-3 bg-green-400 border-2 border-gray-800 rounded-full"></div>
                             </div>
                             <span class="font-medium bg-gray-700 h-4 rounded w-32"></span>
                        </li>
                        <!-- ... -->
                    </ul>
                </div>

                <!-- Khung Chat -->
                <div class="glass-effect rounded-2xl p-4 flex flex-col h-96 lg:h-[500px] overflow-hidden">
                    <div class="flex items-center justify-between mb-3 flex-shrink-0">
                        <h3 class="font-bold text-lg flex items-center gap-2"><i class="fas fa-comments text-yellow-400"></i> Live Chat</h3>
                        <!-- Trạng thái đồng bộ, ẩn khi không cần thiết -->
                        <div id="sync-status" class="flex items-center gap-2 text-green-400 text-sm hidden"> 
                            <i class="fas fa-sync fa-spin"></i>
                            <span>Đồng bộ</span>
                        </div>
                    </div>
                    <!-- Khung chứa tin nhắn chat, có thanh cuộn tùy chỉnh -->
                    <div id="chat-messages" class="flex-1 overflow-y-auto custom-scrollbar pr-2 mb-3 space-y-3 min-h-0">
                        <!-- JS sẽ điền tin nhắn vào đây -->
                        <p class="text-center text-xs text-white/50 italic">Bắt đầu trò chuyện!</p>
                    </div>
                    
                    <!-- Khu vực nhập tin nhắn và nút gửi -->
                    <div class="mt-auto">
                        <!-- Mã mời -->
                        <div class="bg-white/5 border border-white/10 rounded-xl p-2 flex items-center justify-between mb-3">
                             <span class="text-sm text-white/70 ml-2">Mã mời:</span>
                             <span id="inviteCodeText" class="font-mono text-yellow-400 tracking-wider">@Model.InviteCode</span>
                             <button id="copy-invite-btn" title="Sao chép mã mời" class="bg-white/10 hover:bg-yellow-500/50 text-white p-1.5 px-3 rounded-lg transition-all">
                                 <i class="fas fa-copy"></i>
                             </button>
                        </div>
                        <!-- Input và nút gửi -->
                        <div class="flex gap-2">
                             <input type="text" id="message-input" placeholder="Nhập bình luận..." class="flex-grow px-4 py-2 bg-white/10 border border-white/20 rounded-xl text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-yellow-400 transition-all shadow-inner">
                             <button id="send-button" class="bg-gradient-to-r from-yellow-400 to-orange-500 hover:from-yellow-500 hover:to-orange-600 text-white font-bold w-12 h-12 flex items-center justify-center rounded-xl shadow-lg transition-all transform hover:scale-105">
                                 <i class="fas fa-paper-plane"></i>
                             </button>
                        </div>
                    </div>
                </div>
            </aside>
        </main>
    </div>

    <!-- Thư viện SignalR -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
    
    <script>
        (function () {
            // --- 1. DOM Element References ---
            const video = document.getElementById('movie-player');
            const chatMessages = document.getElementById('chat-messages');
            const messageInput = document.getElementById('message-input');
            const sendButton = document.getElementById('send-button');
            const participantsList = document.getElementById('participants-list');
            // Lấy chính xác span chứa số đếm
            const viewerCountSpan = document.getElementById('viewer-count-value'); 
            const participantCountBadge = document.getElementById('participant-count');
            const copyInviteBtn = document.getElementById('copy-invite-btn');
            const syncStatusDiv = document.getElementById('sync-status'); // Đổi tên để rõ ràng hơn
            
            // --- 2. State & Configuration ---
            const inviteCode = "@Model.InviteCode"; 
            // QUAN TRỌNG: Thay thế bằng tên người dùng thực tế từ hệ thống xác thực của bạn.
            const userName = "User_" + Math.floor(Math.random() * 1000); 
            let isHostSeeking = false; // Cờ để kiểm soát việc gửi cập nhật trạng thái video, tránh vòng lặp

            // --- 3. SignalR Connection Setup ---
            // Kết nối tới SignalR Hub
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/watchPartyHub") // Đảm bảo URL này khớp với endpoint SignalR Hub của bạn
                .withAutomaticReconnect()  // Tự động thử kết nối lại khi mất kết nối
                .configureLogging(signalR.LogLevel.Information) // Bật log nếu cần debug
                .build();

            // --- 4. Helper Functions (UI Rendering) ---
            
            
            function addMessageToChat(user, message, type = 'message') {
                const messageElement = document.createElement('div');
                // Lấy thời gian hiện tại theo định dạng địa phương
                const timeString = new Date().toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' });

                if (type === 'message') {
                    // Kiểm tra xem tin nhắn có phải từ người dùng hiện tại không
                    const isCurrentUser = user === userName;
                    // Căn chỉnh bố cục tin nhắn (người dùng hiện tại ở bên phải)
                    messageElement.className = `flex gap-2 ${isCurrentUser ? 'flex-row-reverse' : ''}`;
                    messageElement.innerHTML = `
                        <img src="https://ui-avatars.com/api/?name=${encodeURIComponent(user)}&background=random&bold=true" alt="${user}" class="w-8 h-8 md:w-10 md:h-10 rounded-full flex-shrink-0 border-2 ${isCurrentUser ? 'border-yellow-400' : 'border-blue-400'}">
                        <div class="flex flex-col ${isCurrentUser ? 'items-end' : 'items-start'} max-w-[70%]">
                            <div class="px-3 py-2 rounded-lg ${isCurrentUser ? 'bg-yellow-500' : 'bg-white/20'} shadow">
                                <p class="text-sm break-words">${message}</p>
                            </div>
                            <span class="text-xs text-white/50 mt-1">${user}, ${timeString}</span>
                        </div>
                    `;
                } else { // type === 'notification'
                    // Tin nhắn hệ thống (ví dụ: người dùng tham gia/rời đi)
                    messageElement.className = 'text-center text-xs text-purple-300/80 italic py-1 px-2 rounded-full bg-purple-900/30 max-w-fit mx-auto my-1';
                    messageElement.innerHTML = `<span>${message}</span>`;
                }
                chatMessages.appendChild(messageElement);
                // Tự động cuộn xuống cuối để thấy tin nhắn mới nhất
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }

           
            function updateParticipantsList(userList) {
                participantsList.innerHTML = ''; // Xóa danh sách cũ
                
                // Sắp xếp danh sách, đặt người dùng hiện tại lên đầu nếu có
                userList.sort((a, b) => {
                    if (a === userName) return -1;
                    if (b === userName) return 1;
                    return a.localeCompare(b);
                });

                userList.forEach(user => {
                    const isCurrentUser = user === userName;
                    const li = document.createElement('li');
                    // Thêm lớp CSS để làm nổi bật người dùng hiện tại
                    li.className = `flex items-center gap-3 p-2 rounded-lg transition-colors duration-200 ${isCurrentUser ? 'bg-white/10 hover:bg-white/15' : 'hover:bg-white/5'}`;
                    li.innerHTML = `
                        <div class="relative flex-shrink-0">
                            <img src="https://ui-avatars.com/api/?name=${encodeURIComponent(user)}&background=random&bold=true&size=40" alt="${user}" class="w-10 h-10 rounded-full border-2 ${isCurrentUser ? 'border-yellow-400' : 'border-blue-400'}">
                            <!-- Icon trạng thái online (giả định luôn online) -->
                            <div class="absolute bottom-0 right-0 -mb-0.5 -mr-0.5 w-3 h-3 bg-green-400 border-2 border-gray-800 dark:border-white rounded-full"></div>
                        </div>
                        <span class="font-medium truncate">${user} ${isCurrentUser ? '(Bạn)' : ''}</span>
                    `;
                    participantsList.appendChild(li);
                });

                // Cập nhật cả hai nơi hiển thị số đếm
                // Lưu ý: Số lượng này hoàn toàn phụ thuộc vào dữ liệu server gửi về qua SignalR
                const count = userList.length;
                if(viewerCountSpan) viewerCountSpan.textContent = count;
                participantCountBadge.textContent = count;
            }

            // --- 5. SignalR Event Handlers ---
            // Xử lý khi nhận tin nhắn chat từ server
            connection.on("ReceiveMessage", (user, message) => {
                addMessageToChat(user, message, 'message');
            });
            
            // Xử lý khi nhận danh sách người dùng cập nhật từ server
            // Đây là hàm chính cập nhật số đếm người tham gia
            connection.on("UpdateUserList", (userList) => {
                console.log("Received user list:", userList); // Log để debug
                updateParticipantsList(userList);
            });

            // Xử lý tin nhắn hệ thống từ server
            connection.on("SystemMessage", (message) => {
                addMessageToChat(null, message, 'notification');
            });

            // Xử lý cập nhật trạng thái video (play/pause/seek)
            if (video) {
                connection.on("ReceiveVideoState", (state, serverCurrentTime) => {
                    // Chỉ cập nhật nếu không phải là người dùng đang điều khiển seek
                    if (isHostSeeking) return; 
                    
                    isHostSeeking = true; // Đánh dấu đang xử lý seek từ server
                    syncStatusDiv.classList.remove('hidden'); // Hiển thị trạng thái đang đồng bộ
                    
                    console.log(`Applying server state: ${state}, time: ${serverCurrentTime}`);
                    
                    // Đặt thời gian của video player
                    video.currentTime = serverCurrentTime;

                    // Thực thi play/pause dựa trên trạng thái từ server
                    if (state === "play" && video.paused) {
                        video.play().catch(e => console.error("Play prevented by browser:", e));
                    } else if (state === "pause" && !video.paused) {
                        video.pause();
                    }

                    // Hẹn giờ tắt trạng thái đồng bộ sau một khoảng thời gian ngắn
                    setTimeout(() => { 
                        isHostSeeking = false; 
                        syncStatusDiv.classList.add('hidden'); 
                    }, 500); 
                });
            }

            // --- 6. Client-Side Event Listeners ---
            
            // Gửi tin nhắn chat khi nhấn nút hoặc Enter
            function sendMessage() {
                const message = messageInput.value.trim();
                // Chỉ gửi nếu có nội dung và kết nối đang hoạt động
                if (message && connection.state === signalR.HubConnectionState.Connected) {
                    // Gọi hàm SendMessage trên Hub
                    connection.invoke("SendMessage", inviteCode, userName, message)
                        .then(() => {
                            messageInput.value = ''; // Xóa input sau khi gửi thành công
                            // Có thể thêm tin nhắn gửi đi vào UI ngay lập tức hoặc chờ phản hồi từ server
                             // addMessageToChat(userName, message, 'message'); // Tùy chọn: hiển thị ngay
                        })
                        .catch(err => {
                            console.error("Lỗi gửi tin nhắn:", err);
                            addMessageToChat(null, "Gửi tin nhắn thất bại.", 'notification');
                        });
                }
            }
            sendButton.addEventListener('click', sendMessage);
            messageInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault(); // Ngăn chặn hành vi mặc định của Enter (ví dụ: submit form)
                    sendMessage();
                }
            });

            // Xử lý sao chép mã mời
            copyInviteBtn.addEventListener('click', () => {
                navigator.clipboard.writeText(inviteCode).then(() => {
                    // Hiển thị thông báo thành công ngắn hạn
                    const originalContent = copyInviteBtn.innerHTML;
                    copyInviteBtn.innerHTML = '<i class="fas fa-check text-green-400"></i>';
                    copyInviteBtn.disabled = true; // Tạm thời vô hiệu hóa nút
                    setTimeout(() => { 
                        copyInviteBtn.innerHTML = originalContent; 
                        copyInviteBtn.disabled = false;
                    }, 2000);
                }).catch(err => {
                    console.error("Lỗi sao chép mã mời:", err);
                    alert("Không thể sao chép mã mời.");
                });
            });

            // Gửi cập nhật trạng thái video lên server khi có thay đổi
            if (video) {
                const sendState = () => {
                    // Không gửi nếu đang xử lý seek từ server hoặc chưa kết nối
                    if (isHostSeeking || connection.state !== signalR.HubConnectionState.Connected) return; 
                    
                    // Xác định trạng thái (play/pause)
                    const state = video.paused ? "pause" : "play";
                    // Gọi hàm SyncVideoState trên Hub
                    connection.invoke("SyncVideoState", inviteCode, state, video.currentTime)
                            .catch(err => console.error("Lỗi gửi trạng thái video:", err));
                };
                video.onplay = sendState;
                video.onpause = sendState;
                video.onseeked = sendState; // Sự kiện này kích hoạt khi người dùng kéo thanh tua
            }

            // --- 7. Start Connection ---
            // Hàm bất đồng bộ để bắt đầu kết nối SignalR
            async function startConnection() {
                try {
                    await connection.start(); // Bắt đầu kết nối
                    console.log("SignalR Connected.");
                    // Thông báo cho Hub biết client đã tham gia phòng
                    await connection.invoke("JoinRoom", inviteCode, userName); 
                    console.log(`Joined room: ${inviteCode} as ${userName}`);
                } catch (err) {
                    console.error("Lỗi kết nối SignalR: ", err);
                    // Hiển thị thông báo lỗi cho người dùng nếu kết nối thất bại
                    addMessageToChat(null, 'Không thể kết nối tới máy chủ xem phim. Vui lòng kiểm tra lại mạng hoặc thử lại sau.', 'notification');
                    // Có thể thêm logic thử lại kết nối ở đây nếu cần
                }
            }

            // Gọi hàm bắt đầu kết nối khi script được tải
            startConnection();

            // --- Cleanup: Ngắt kết nối khi người dùng rời khỏi trang ---
            window.addEventListener('beforeunload', () => {
                if (connection.state === signalR.HubConnectionState.Connected) {
                    connection.invoke("LeaveRoom", inviteCode, userName)
                        .catch(err => console.error("Lỗi khi rời phòng:", err));
                    connection.stop();
                }
            });

        })();
    </script>
</body>
</html>