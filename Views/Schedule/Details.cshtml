

@model MovieDetailViewModel

@{
    ViewData["Title"] = Model.Movie.Title;
  
  
    // --- THAY ĐỔI 1: Lấy dữ liệu trực tiếp từ ViewModel đã được xử lý ở Controller ---
   
    var airedEpisodesCount = Model.AiredEpisodesCount;
    var firstEpisode = Model.AiredEpisodes.OrderBy(e => e.EpisodeNumber).FirstOrDefault();
    var firstEpisodeNumber = firstEpisode?.EpisodeNumber ?? 1;
}
@* Ensure your main CSS files are linked in _Layout.cshtml.
   If home.css is project-specific, it's fine to link it here. *@
<link rel="stylesheet" href="~/css/details.css" asp-append-version="true" />

<style>   .top-banner {
        position: relative;
        width: 100%;
        height: 900px;
        background-image: url('@Model.Movie.PosterPath');
        background-size: cover;
        background-position: center;
        filter: blur(3px);
        -webkit-filter: blur(8px);
        z-index: 0;
    }</style>

<!-- Top Blurred Background Banner -->
<div class="top-banner">
    <div class="overlay"></div>
</div>

<!-- Content Above Banner -->
<div class="container-fluid content-above-banner">
    <div class="movie-header-detail">
        <div class="movie-header-poster">
            <img src="@Model.Movie.PosterDoc" alt="@Model.Movie.Title Poster">
        </div>
        <div class="movie-header-info">
            <h1>@Model.Movie.Title</h1>
            @if (!string.IsNullOrEmpty(Model.Movie.EnglishTitle))
            {
                <h2>@Model.Movie.EnglishTitle</h2>
            }
            <div class="main-action-buttons">
                <a asp-action="Watch" asp-controller="Movies" asp-route-movieId="@Model.Movie.Id" asp-route-episodeNumber="@firstEpisodeNumber" class="btn-watch-now">
                    <i class="fas fa-play"></i> Xem Ngay
                </a>
                @{
        ViewBag.CurrentMovieId = Model.Movie.Id;
    }
    @await Html.PartialAsync("_WatchTogetherPartial")
                <div class="action-icon-group">
                    @* --- MODIFIED FAVORITE LINK --- *@
                    <a href="#"
                       id="favorite-action-link"
                       class="action-item @(Model.IsUserLoggedIn && Model.HasFavorited ? "favorited" : "")"
                       data-movie-id="@Model.Movie.Id"
                       data-user-id="@Model.UserId" @* Pass the current user's ID *@
                       data-is-favorited="@(Model.IsUserLoggedIn && Model.HasFavorited ? "true" : "false")">
                        <i class="@(Model.IsUserLoggedIn && Model.HasFavorited ? "fas fa-heart" : "far fa-heart")"></i> Yêu thích
                    </a>

                    @* --- END MODIFIED FAVORITE LINK --- *@
                    <a href="#" class="action-item"><i class="fas fa-plus"></i> Thêm vào</a>
                    <a href="#" class="action-item"><i class="fas fa-share-alt"></i> Chia sẻ</a>
                    <a href="#comments-subtab" class="action-item"><i class="fas fa-comment-dots"></i> Bình luận</a>
                </div>
                <div class="rating-badge">
                    <i class="fas fa-star"></i> @(Model.Ratings.Any() ? Model.Movie.AverageRating.ToString("F1") : "Chưa có") Đánh giá
                </div>
                
            </div>
        </div>
    </div>

    <!-- Horizontal Navigation Tabs -->
    <div class="horizontal-nav-tabs">
        <a href="#" class="nav-tab-item active" onclick="showContentTab('episodes-tab'); return false;">Tập phim</a>
        <a href="#" class="nav-tab-item" onclick="showContentTab('gallery-tab'); return false;">Gallery</a>
        <a href="#" class="nav-tab-item" onclick="showContentTab('cast-tab'); return false;">Diễn viên</a>
        <a href="#" class="nav-tab-item" onclick="showContentTab('recommendations-tab'); return false;">Đề xuất</a>
    </div>
</div>

<!-- Main Content Area -->
<div class="container-fluid main-content-area">
    <div class="row">
        <!-- Left Column -->
        <div class="col-12 col-lg-8">
            <!-- Episodes Tab -->
            <div id="episodes-tab" class="content-tab-pane">
                <div class="movie-meta-info">
                    <span class="meta-tag imdb-rating">
                        <i class="fas fa-star"></i> @(Model.Ratings.Any() ? Model.Movie.AverageRating.ToString("F1") : "Chưa có")
                    </span>
                    <span class="meta-tag age-rating">T16</span> @* Example age rating, should ideally be dynamic *@
                    <span class="meta-tag">@Model.Movie.ReleaseYear</span>
                    <span class="meta-tag">Tập @airedEpisodesCount</span> @* Use ViewModel's count *@
                </div>

                <div class="genres-list">
                    @if (Model.Movie.Genre != null) @* Safety check for Genre object *@
                    {
                        <span class="genre-item">@Model.Movie.Genre.Name</span>
                    }
                    @foreach (var movieGenre in Model.Movie.MovieGenres)
                    {
                        <span class="genre-item">@movieGenre.Genre.Name</span>
                    }
                </div>

                <p class="aired-status">Đã chiếu: @airedEpisodesCount / @Model.Movie.TotalEpisodes tập @(Model.Movie.IsCompleted ? "(Hoàn thành)" : "(Đang cập nhật)")</p>

                <h3 class="section-title">Giới thiệu</h3>
                <p class="movie-description-full">@Model.Movie.Description</p>

                <ul class="movie-details-list">
                    <li><strong>Đạo diễn:</strong> @(Model.Movie.Director ?? "Chưa có thông tin")</li>
                    <li><strong>Quốc gia:</strong> @(Model.Movie.Country?.Name ?? "Chưa có thông tin")</li> @* Safety check for Country object *@
                    <li><strong>Lượt xem:</strong> @Model.Movie.Views</li>
                </ul>

                <!-- Next Episode Notification -->
             @if (Model.NextEpisodeScheduleTime.HasValue)
{
    var nextEpisodeNum = Model.AiredEpisodes.Any() ? Model.AiredEpisodes.Max(e => e.EpisodeNumber) + 1 : 1;
    var releaseTime = Model.NextEpisodeScheduleTime.Value.ToLocalTime();

    <div class="next-episode-banner">
        <i class="fas fa-bell icon"></i>
        <span class="info-text">
            Tập @nextEpisodeNum dự kiến phát sóng vào @releaseTime.ToString("HH:mm") ngày @releaseTime.ToString("dd/MM/yyyy").
        </span>
        <span class="countdown-text" id="countdown-timer" data-release-time="@Model.NextEpisodeScheduleTime.Value.ToString("o")">
            <!-- JavaScript sẽ điền nội dung đếm ngược vào đây -->
        </span>
    </div>
}
else if (!Model.Movie.IsCompleted)
{
    // Thêm class "updating" để có màu khác
    <div class="next-episode-banner updating">
        <i class="fas fa-info-circle icon"></i>
        <span class="info-text">Phim đang được cập nhật. Lịch chiếu tập mới sẽ được thông báo sớm nhất.</span>
    </div>
}
                <!-- Episode Selection -->
                <div class="episode-selection-header">
                    <h3>Phần 1</h3> @* Assuming only one part, adjust if your movie structure has multiple parts *@
                    <div class="episode-options">
                        <a href="#" class="episode-option-btn"><i class="fas fa-closed-captioning"></i> Phụ đề</a>
                        <a href="#" class="episode-option-btn"><i class="fas fa-microphone"></i> Thuyết minh</a>
                        <label class="toggle-switch">
                            <input type="checkbox" id="collapseEpisodes">
                            <span class="slider"></span>
                        </label>
                        <span style="font-size: 0.9rem; color: #E0E0E0;">Rút gọn</span>
                    </div>
                </div>

                <div class="episode-buttons-grid" id="episodeGrid">
                    @* --- THAY ĐỔI 3: Lặp qua danh sách TẬP ĐÃ CHIẾU (AiredEpisodes) --- *@
                    @if (Model.AiredEpisodes.Any())
                    {
                        @foreach (var episode in Model.AiredEpisodes.OrderBy(e => e.EpisodeNumber))
                        {
                            <a asp-action="Watch" asp-controller="Movies" asp-route-movieId="@Model.Movie.Id" asp-route-episodeNumber="@episode.EpisodeNumber"
                               class="btn @(episode.EpisodeNumber == firstEpisodeNumber ? "active" : "")">Tập @episode.EpisodeNumber</a>
                        }
                    }
                    else
                    {
                        <p class="text-muted text-center mt-3">Chưa có tập nào được phát hành. Vui lòng quay lại sau!</p>
                    }
                </div>
            </div>

            <!-- Gallery Tab -->
            <div id="gallery-tab" class="content-tab-pane" style="display: none;">
                <h3 class="section-title">Gallery</h3>
                <p class="text-muted">Chưa có hình ảnh trong gallery. Nội dung sẽ được cập nhật sớm.</p>
            </div>

            <!-- Cast Tab -->
            <div id="cast-tab" class="content-tab-pane" style="display: none;">
                <h3 class="section-title">Diễn viên</h3>
                @if (!string.IsNullOrWhiteSpace(Model.Movie.Cast))
                {
                    var castMembers = Model.Movie.Cast.Split(',', StringSplitOptions.RemoveEmptyEntries).Select(s => s.Trim()).ToList();
                    <div class="cast-grid" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 20px;">
                        @foreach (var member in castMembers.Take(6))
                        {
                            <div class="cast-member" style="text-align: center;">
                                @* Using a placeholder avatar service for demonstration *@
                                <img src="https://ui-avatars.com/api/?name=@(Uri.EscapeDataString(member))&background=random&color=fff"
                                     alt="@member" style="width: 80px; height: 80px; border-radius: 50%; object-fit: cover; margin-bottom: 8px; border: 2px solid #4C4F62;">
                                <p style="font-size: 0.9rem; color: #E0E0E0; margin: 0;">@member</p>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <p class="text-muted">Chưa có thông tin diễn viên.</p>
                }
            </div>

            <!-- Recommendations Tab -->
            <div id="recommendations-tab" class="content-tab-pane" style="display: none;">
                <h3 class="section-title">Đề xuất cho bạn</h3>
                @if (Model.RelatedMovies.Any())
                {
                    <div class="recommendation-grid" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px;">
                        @foreach (var relatedMovie in Model.RelatedMovies.Take(4))
                        {
                            <a asp-action="Details" asp-controller="Movies" asp-route-id="@relatedMovie.Id" class="recommended-movie-card" style="display: flex; text-decoration: none;">
                                <img src="@relatedMovie.PosterDoc" alt="@relatedMovie.Title"
                                     style="width: 90px; height: 130px; object-fit: cover; border-radius: 8px; margin-right: 10px;">
                                <div class="recommended-movie-details">
                                    <h4 style="font-size: 1.1rem; margin-bottom: 5px; color: white;">@relatedMovie.Title</h4>
                                    @if (!string.IsNullOrEmpty(relatedMovie.EnglishTitle))
                                    {
                                        <p style="font-size: 0.9rem; color: #B0B0B0; margin-bottom: 5px;">@relatedMovie.EnglishTitle</p>
                                    }
                                    <div class="recommended-movie-meta" style="display: flex; flex-wrap: wrap; gap: 5px; font-size: 0.8rem; color: #9C9C9C;">
                                        <span style="background-color: #4C4F62; padding: 3px 8px; border-radius: 3px;">T16</span> @* Example rating, should be dynamic *@
                                        <span style="background-color: #4C4F62; padding: 3px 8px; border-radius: 3px;">Tập @relatedMovie.TotalEpisodes</span>
                                    </div>
                                </div>
                            </a>
                        }
                    </div>
                }
                else
                {
                    <p class="text-muted">Không có phim đề xuất.</p>
                }
            </div>

            <!-- Comment & Rating Section -->
            <div class="comment-section-wrapper">
                <div class="comment-tabs">
                    <button class="comment-tab-btn active" onclick="showCommentRatingTab('comments-subtab'); return false;">Bình luận (@Model.Comments.Count(c => c.EpisodeId == null))</button>
                    <button class="comment-tab-btn" onclick="showCommentRatingTab('ratings-subtab'); return false;">Đánh giá (@Model.Ratings.Count())</button>
                </div>

                <!-- Comments Subtab -->
                <div id="comments-subtab" class="comment-rating-subtab">
                    @if (!Model.IsUserLoggedIn)
                    {
                        <div class="login-prompt">
                            Vui lòng <a asp-controller="Account" asp-action="Login">đăng nhập</a> để tham gia bình luận.
                        </div>
                    }
                    else
                    {
                        <!-- Comment Form (Only if logged in) -->
                        <form asp-action="AddComment" asp-controller="Movies" method="post" class="comment-form mb-4">
                            <input type="hidden" asp-for="NewComment.MovieId" />
                            <input type="hidden" asp-for="NewComment.EpisodeId" /> @* This is null for movie-level comments *@
                            @* If you implement nested replies, you'll need a hidden input for ParentCommentId here,
                                or dynamically set it when the reply form is shown. *@
                            @* <input type="hidden" asp-for="NewComment.ParentCommentId" /> *@

                            <div class="form-group">
                                @* Make fields readonly if user is logged in and data is pre-filled *@
                                <input asp-for="NewComment.UserName" class="form-control" placeholder="Tên của bạn" readonly="@Model.IsUserLoggedIn" />
                                <span asp-validation-for="NewComment.UserName" class="text-danger"></span>
                            </div>
                            <div class="form-group">
                                <input asp-for="NewComment.UserEmail" class="form-control" placeholder="Email của bạn" readonly="@Model.IsUserLoggedIn" />
                                <span asp-validation-for="NewComment.UserEmail" class="text-danger"></span>
                            </div>
                            <div class="form-group">
                                <textarea asp-for="NewComment.Content" class="form-control" rows="4" placeholder="Viết bình luận"></textarea>
                                <span asp-validation-for="NewComment.Content" class="text-danger"></span>
                            </div>
                            <div class="d-flex justify-content-between align-items-center mt-3">
                                <div class="d-flex align-items-center">
                                    <label class="toggle-switch">
                                        <input type="checkbox" name="IsSpoiler">
                                        <span class="slider"></span>
                                    </label>
                                    <span style="font-size: 0.9rem; color: #D0D0D0; margin-left: 5px;">Tiết lộ?</span>
                                </div>
                                <button type="submit" class="btn-submit-comment">Gửi <i class="fas fa-paper-plane ml-2"></i></button>
                            </div>
                        </form>
                    }

                    <!-- Comments Display -->
                    @if (Model.Comments.Any(c => c.EpisodeId == null))
                    {
                        @foreach (var comment in Model.Comments.Where(c => c.EpisodeId == null && c.ParentCommentId == null).OrderByDescending(c => c.CreatedAt))
                        {
                            <div class="comment-item">
                                <div class="comment-header">
                                    <img src="https://ui-avatars.com/api/?name=@(Uri.EscapeDataString(comment.UserName))&background=random&color=fff" alt="Avatar" class="user-avatar">
                                    <span class="user-name">@comment.UserName</span>
                                    <span class="comment-meta">@comment.CreatedAt.ToString("HH:mm dd/MM/yyyy")</span>
                                </div>
                                <p class="comment-content">@comment.Content</p>
                                <div class="comment-actions">
                                    <span><i class="far fa-thumbs-up"></i> @comment.Likes</span>
                                    <span><i class="far fa-thumbs-down"></i> @comment.Dislikes</span>
                                    @if (Model.IsUserLoggedIn) @* Only show reply link if logged in *@
                                    {
                                        <a href="#" onclick="showReplyForm(@comment.Id); return false;">Trả lời</a>
                                    }
                                </div>
                                @if (comment.Replies != null && comment.Replies.Any())
                                {
                                    <div class="replies">
                                        @foreach (var reply in comment.Replies.OrderBy(r => r.CreatedAt))
                                        {
                                            <div class="comment-item">
                                                <div class="comment-header">
                                                    <img src="https://ui-avatars.com/api/?name=@(Uri.EscapeDataString(reply.UserName))&background=random&color=fff" alt="Avatar" class="user-avatar">
                                                    <span class="user-name">@reply.UserName</span>
                                                    <span class="comment-meta">@reply.CreatedAt.ToString("HH:mm dd/MM/yyyy")</span>
                                                </div>
                                                <p class="comment-content">@reply.Content</p>
                                                <div class="comment-actions">
                                                    <span><i class="far fa-thumbs-up"></i> @reply.Likes</span>
                                                    <span><i class="far fa-thumbs-down"></i> @reply.Dislikes</span>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                                @if (Model.IsUserLoggedIn) @* Show reply form only if logged in *@
                                {
                                    <form asp-action="AddComment" asp-controller="Movies" method="post" class="comment-form mb-4 reply-form" id="reply-form-@comment.Id" style="display: none;">
                                        <input type="hidden" asp-for="NewComment.MovieId" />
                                        <input type="hidden" asp-for="NewComment.EpisodeId" />
                                        <input type="hidden" asp-for="NewComment.ParentCommentId" value="@comment.Id" />
                                        <div class="form-group">
                                            <input asp-for="NewComment.UserName" class="form-control" placeholder="Tên của bạn" readonly="@Model.IsUserLoggedIn" />
                                            <span asp-validation-for="NewComment.UserName" class="text-danger"></span>
                                        </div>
                                        <div class="form-group">
                                            <input asp-for="NewComment.UserEmail" class="form-control" placeholder="Email của bạn" readonly="@Model.IsUserLoggedIn" />
                                            <span asp-validation-for="NewComment.UserEmail" class="text-danger"></span>
                                        </div>
                                        <div class="form-group">
                                            <textarea asp-for="NewComment.Content" class="form-control" rows="3" placeholder="Viết câu trả lời"></textarea>
                                            <span asp-validation-for="NewComment.Content" class="text-danger"></span>
                                        </div>
                                        <button type="submit" class="btn-submit-comment">Gửi trả lời</button>
                                    </form>
                                }
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-center text-muted">Chưa có bình luận nào cho phim này. Hãy là người đầu tiên bình luận!</p>
                    }
                </div>

                <!-- Ratings Subtab -->
                <div id="ratings-subtab" class="comment-rating-subtab" style="display: none;">
                    <h3 class="section-title">Đánh giá từ người xem</h3>
                    @if (!Model.IsUserLoggedIn)
                    {
                        <div class="login-prompt">
                            Vui lòng <a asp-controller="Account" asp-action="Login">đăng nhập</a> để đánh giá phim.
                        </div>
                    }
                    else
                    {
                        <form asp-action="AddRating" asp-controller="Movies" method="post" class="comment-form mb-4">
                            <input type="hidden" asp-for="NewRating.MovieId" />
                            <div class="form-group">
                                <input asp-for="NewRating.UserName" class="form-control" placeholder="Tên của bạn" readonly="@Model.IsUserLoggedIn" />
                                <span asp-validation-for="NewRating.UserName" class="text-danger"></span>
                            </div>
                            <div class="form-group">
                                <input asp-for="NewRating.UserEmail" class="form-control" placeholder="Email của bạn" readonly="@Model.IsUserLoggedIn" />
                                <span asp-validation-for="NewRating.UserEmail" class="text-danger"></span>
                            </div>
                            <div class="form-group">
                                <label asp-for="NewRating.Score"></label>
                                <select asp-for="NewRating.Score" class="form-control">
                                    @for (int i = 1; i <= 10; i++)
                                    {
                                        <option value="@i">@i</option>
                                    }
                                </select>
                                <span asp-validation-for="NewRating.Score" class="text-danger"></span>
                            </div>
                            <div class="form-group">
                                <textarea asp-for="NewRating.Review" class="form-control" rows="4" placeholder="Viết nhận xét"></textarea>
                                <span asp-validation-for="NewRating.Review" class="text-danger"></span>
                            </div>
                            <button type="submit" class="btn-submit-comment">Gửi đánh giá</button>
                        </form>
                    }

                    @if (Model.Ratings.Any())
                    {
                        @foreach (var rating in Model.Ratings.OrderByDescending(r => r.CreatedAt))
                        {
                            <div class="comment-item">
                                <div class="comment-header">
                                    <img src="https://ui-avatars.com/api/?name=@(Uri.EscapeDataString(rating.UserName))&background=2196F3&color=fff" alt="Avatar" class="user-avatar" style="border-color: #2196F3;">
                                    <span class="user-name" style="color: #2196F3;">@rating.UserName</span>
                                    <span class="comment-meta">@rating.CreatedAt.ToString("dd/MM/yyyy")</span>
                                </div>
                                <p class="comment-content">
                                    Điểm: <strong>@rating.Score/10</strong> <i class="fas fa-star" style="color: #FFC107;"></i>
                                    @if (!string.IsNullOrWhiteSpace(rating.Review))
                                    {
                                        <br />@rating.Review
                                    }
                                </p>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-center text-muted">Chưa có đánh giá nào cho phim này. Hãy là người đầu tiên đánh giá!</p>
                    }
                </div>
            </div>
        </div>

        <!-- Right Column -->
        <div class="col-12 col-lg-4">
            <h3 class="section-title">Thông tin thêm</h3>
            <p class="text-muted">Nội dung bổ sung sẽ được cập nhật sớm.</p>
        </div>
    </div>
</div>
@section Scripts {
    @* Thư viện client của SignalR phải được thêm vào trước script của bạn *@
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>

    <script>
        // === KHAI BÁO CÁC HÀM TIỆN ÍCH ===

        // Hàm để hiển thị các tab nội dung chính (Tập phim, Gallery, v.v.)
        function showContentTab(tabId) {
            document.querySelectorAll('.content-tab-pane').forEach(pane => pane.style.display = 'none');
            document.querySelectorAll('.horizontal-nav-tabs .nav-tab-item').forEach(btn => btn.classList.remove('active'));
            
            const selectedPane = document.getElementById(tabId);
            if (selectedPane) selectedPane.style.display = 'block';

            const selectedButton = document.querySelector(`.nav-tab-item[onclick*="'${tabId}'"]`);
            if (selectedButton) selectedButton.classList.add('active');
        }

        // Hàm để hiển thị các tab con (Bình luận, Đánh giá)
        function showCommentRatingTab(tabId) {
            document.querySelectorAll('.comment-rating-subtab').forEach(subtab => subtab.style.display = 'none');
            document.querySelectorAll('.comment-tabs .comment-tab-btn').forEach(btn => btn.classList.remove('active'));

            const selectedSubtab = document.getElementById(tabId);
            if (selectedSubtab) selectedSubtab.style.display = 'block';
            
            const selectedButton = document.querySelector(`.comment-tab-btn[onclick*="'${tabId}'"]`);
            if (selectedButton) selectedButton.classList.add('active');
        }

        // Hàm để ẩn/hiện form trả lời bình luận
        function showReplyForm(commentId) {
            const replyForm = document.getElementById(`reply-form-${commentId}`);
            if (replyForm) {
                replyForm.style.display = replyForm.style.display === 'none' ? 'block' : 'none';
            }
        }

        // === SỰ KIỆN KHI TRANG ĐÃ TẢI XONG ===

        document.addEventListener("DOMContentLoaded", function() {
            // --- 1. KHỞI TẠO ĐỒNG HỒ ĐẾM NGƯỢC ---
            const countdownElement = document.getElementById('countdown-timer');
            if (countdownElement) {
                const releaseTime = new Date(countdownElement.getAttribute('data-release-time'));
                let timerInterval;

                const updateCountdown = () => {
                    const now = new Date();
                    const diff = releaseTime - now;

                    if (diff <= 0) {
                         clearInterval(timerInterval);
   setTimeout(() => location.reload(), 1000);
    return;
                    }

                    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
                    const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
                    const seconds = Math.floor((diff % (1000 * 60)) / 1000);

                    countdownElement.innerHTML = `Sẽ ra mắt trong: ${days}d ${hours}h ${minutes}m ${seconds}s`;
                };

                updateCountdown();
                timerInterval = setInterval(updateCountdown, 1000);
            }

            // --- 2. KHỞI TẠO KẾT NỐI SIGNALR ---
            const currentMovieId = @Model.Movie.Id;
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/scheduleHub") // Đảm bảo URL này khớp với `MapHub` trong Program.cs
                .withAutomaticReconnect() // Tự động kết nối lại nếu mất mạng
                .configureLogging(signalR.LogLevel.Information)
                .build();

            // Lắng nghe sự kiện "NewEpisodeReleased" từ server
            const currentMovieId = @Model.Movie.Id;
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/scheduleHub")
                .withAutomaticReconnect()
                .build();

            connection.on("NewEpisodeReleased", (data) => {
                if (data.movieId === currentMovieId) {
                    console.log("Tập mới của phim này! Đang làm mới trang...");
                    location.reload(); // Chỉ tải lại trang, không hiện thông báo
                }
            });

            async function startSignalR() {
                try {
                    await connection.start();
                    console.log("SignalR đã kết nối.");
                } catch (err) {
                    console.error("Lỗi SignalR:", err);
                }
            }
            startSignalR();
        });
            // Bắt đầu kết nối và xử lý lỗi
            async function startSignalR() {
                try {
                    await connection.start();
                    console.log("SignalR đã kết nối thành công.");
                } catch (err) {
                    console.error("Lỗi kết nối SignalR:", err);
                    // Không cần retry ở đây vì `withAutomaticReconnect()` đã xử lý
                }
            }

            startSignalR();

        }); // Kết thúc sự kiện DOMContentLoaded

        // === SỰ KIỆN DÙNG JQUERY (NẾU BẠN VẪN DÙNG) ===

        $(document).ready(function() {
            // --- 3. KHỞI TẠO CÁC TAB MẶC ĐỊNH ---
            showContentTab('episodes-tab');
            showCommentRatingTab('comments-subtab');

            // --- 4. XỬ LÝ NÚT THU GỌN DANH SÁCH TẬP ---
            const collapseToggle = document.getElementById('collapseEpisodes');
            const episodeGrid = document.getElementById('episodeGrid');
            if (collapseToggle && episodeGrid) {
                collapseToggle.addEventListener('change', function() {
                    episodeGrid.style.display = this.checked ? 'none' : 'grid'; // Dùng 'grid' hoặc 'flex' tùy CSS
                });
            }

            // --- 5. XỬ LÝ SỰ KIỆN CLICK NÚT "YÊU THÍCH" ---
            $('#favorite-action-link').on('click', function(e) {
                e.preventDefault();

                const link = $(this);
                const movieId = link.data('movie-id');
                const userId = link.data('user-id');
                let isFavorited = link.data('is-favorited') === true;

                if (!userId) {
                    alert("Vui lòng đăng nhập để thêm phim vào danh sách yêu thích.");
                    // Tùy chọn: Chuyển hướng đến trang đăng nhập
                    // window.location.href = '@Url.Action("Login", "Account")';
                    return;
                }

                $.ajax({
                    url: '@Url.Action("ToggleFavorite", "Movies")',
                    type: 'POST',
                    data: {
                        movieId: movieId,
                        // Thêm token chống giả mạo CSRF để bảo mật
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    dataType: 'json',
                    success: function(response) {
                        if (response.success) {
                            isFavorited = response.isFavorited;
                            link.data('is-favorited', isFavorited);

                            if (isFavorited) {
                                link.addClass('favorited');
                                link.find('i').removeClass('far fa-heart').addClass('fas fa-heart');
                            } else {
                                link.removeClass('favorited');
                                link.find('i').removeClass('fas fa-heart').addClass('far fa-heart');
                            }
                        } else {
                            alert("Lỗi khi cập nhật: " + response.message);
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error("Lỗi AJAX:", status, error);
                        alert("Đã xảy ra lỗi mạng hoặc máy chủ. Vui lòng thử lại.");
                    }
                });
            });
        }); // Kết thúc sự kiện jQuery ready
    </script>
 
}

    @* CSS for the favorited state and readonly form inputs *@
    <style>
        .action-item.favorited {
            color: #e74c3c; /* Red color for favorited state */
        }
        .action-item.favorited i {
            color: #e74c3c; /* Ensure icon also matches */
        }
        /* Styles for comment/rating forms and their readonly inputs */
        .comment-form .form-group input[readonly],
        .comment-form .form-group textarea[readonly] {
            background-color: #3a3a5a; /* Darker background for readonly fields */
            color: #b0b0b0; /* Lighter text color for readonly fields */
            cursor: not-allowed; /* Indicate it's not editable */
        }
        /* Add any other specific styles you might need for the rating section or tabs */
    </style>
} 